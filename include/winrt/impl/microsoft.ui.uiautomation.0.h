// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_UIAutomation_0_H
#define WINRT_Microsoft_UI_UIAutomation_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
    struct Point;
    struct Rect;
}
WINRT_EXPORT namespace winrt::Windows::UI::UIAutomation
{
    struct AutomationConnectionBoundObject;
    struct AutomationElement;
    struct AutomationTextRange;
}
WINRT_EXPORT namespace winrt::Windows::UI::UIAutomation::Core
{
    enum class AutomationRemoteOperationStatus : int32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::UIAutomation
{
    enum class AutomationActiveEnd : int32_t
    {
        None = 0,
        Start = 1,
        End = 2,
    };
    enum class AutomationAnimationStyle : int32_t
    {
        None = 0,
        LasVegasLights = 1,
        BlinkingBackground = 2,
        SparkleText = 3,
        MarchingBlackAnts = 4,
        MarchingRedAnts = 5,
        Shimmer = 6,
        Other = -1,
    };
    enum class AutomationAnnotationType : int32_t
    {
        Unknown = 60000,
        SpellingError = 60001,
        GrammarError = 60002,
        Comment = 60003,
        FormulaError = 60004,
        TrackChanges = 60005,
        Header = 60006,
        Footer = 60007,
        Highlighted = 60008,
        Endnote = 60009,
        Footnote = 60010,
        InsertionChange = 60011,
        DeletionChange = 60012,
        MoveChange = 60013,
        FormatChange = 60014,
        UnsyncedChange = 60015,
        EditingLockedChange = 60016,
        ExternalChange = 60017,
        ConflictingChange = 60018,
        Author = 60019,
        AdvancedProofingIssue = 60020,
        DataValidationError = 60021,
        CircularReferenceError = 60022,
        Mathematics = 60023,
        Sensitive = 60024,
    };
    enum class AutomationBulletStyle : int32_t
    {
        None = 0,
        HollowRoundBullet = 1,
        FilledRoundBullet = 2,
        HollowSquareBullet = 3,
        FilledSquareBullet = 4,
        DashBullet = 5,
        Other = -1,
    };
    enum class AutomationCapStyle : int32_t
    {
        None = 0,
        SmallCap = 1,
        AllCap = 2,
        AllPetiteCaps = 3,
        PetiteCaps = 4,
        Unicase = 5,
        Titling = 6,
        Other = -1,
    };
    enum class AutomationCaretBidiMode : int32_t
    {
        LTR = 0,
        RTL = 1,
    };
    enum class AutomationCaretPosition : int32_t
    {
        Unknown = 0,
        EndOfLine = 1,
        BeginningOfLine = 2,
    };
    enum class AutomationControlType : int32_t
    {
        Button = 50000,
        Calendar = 50001,
        CheckBox = 50002,
        ComboBox = 50003,
        Edit = 50004,
        Hyperlink = 50005,
        Image = 50006,
        ListItem = 50007,
        List = 50008,
        Menu = 50009,
        MenuBar = 50010,
        MenuItem = 50011,
        ProgressBar = 50012,
        RadioButton = 50013,
        ScrollBar = 50014,
        Slider = 50015,
        Spinner = 50016,
        StatusBar = 50017,
        Tab = 50018,
        TabItem = 50019,
        Text = 50020,
        ToolBar = 50021,
        ToolTip = 50022,
        Tree = 50023,
        TreeItem = 50024,
        Custom = 50025,
        Group = 50026,
        Thumb = 50027,
        DataGrid = 50028,
        DataItem = 50029,
        Document = 50030,
        SplitButton = 50031,
        Window = 50032,
        Pane = 50033,
        Header = 50034,
        HeaderItem = 50035,
        Table = 50036,
        TitleBar = 50037,
        Separator = 50038,
        SemanticZoom = 50039,
        AppBar = 50040,
    };
    enum class AutomationDockPosition : int32_t
    {
        Top = 0,
        Left = 1,
        Bottom = 2,
        Right = 3,
        Fill = 4,
        None = 5,
    };
    enum class AutomationExpandCollapseState : int32_t
    {
        Collapsed = 0,
        Expanded = 1,
        PartiallyExpanded = 2,
        LeafNode = 3,
    };
    enum class AutomationFlowDirections : int32_t
    {
        Default = 0,
        RightToLeft = 1,
        BottomToTop = 2,
        Vertical = 4,
    };
    enum class AutomationHeadingLevel : int32_t
    {
        None = 80050,
        Level1 = 80051,
        Level2 = 80052,
        Level3 = 80053,
        Level4 = 80054,
        Level5 = 80055,
        Level6 = 80056,
        Level7 = 80057,
        Level8 = 80058,
        Level9 = 80059,
    };
    enum class AutomationHorizontalTextAlignment : int32_t
    {
        Left = 0,
        Centered = 1,
        Right = 2,
        Justified = 3,
    };
    enum class AutomationLandmarkType : int32_t
    {
        Custom = 80000,
        Form = 80001,
        Main = 80002,
        Navigation = 80003,
        Search = 80004,
    };
    enum class AutomationLiveSetting : int32_t
    {
        Off = 0,
        Polite = 1,
        Assertive = 2,
    };
    enum class AutomationMetadata : int32_t
    {
        SayAsInterpretAs = 100000,
    };
    enum class AutomationNavigateDirection : int32_t
    {
        Parent = 0,
        NextSibling = 1,
        PreviousSibling = 2,
        FirstChild = 3,
        LastChild = 4,
    };
    enum class AutomationOrientationType : int32_t
    {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
    };
    enum class AutomationOutlineStyles : int32_t
    {
        None = 0,
        Outline = 1,
        Shadow = 2,
        Engraved = 4,
        Embossed = 8,
    };
    enum class AutomationPatternId : int32_t
    {
        Invoke = 10000,
        Selection = 10001,
        Value = 10002,
        RangeValue = 10003,
        Scroll = 10004,
        ExpandCollapse = 10005,
        Grid = 10006,
        GridItem = 10007,
        MultipleView = 10008,
        Window = 10009,
        SelectionItem = 10010,
        Dock = 10011,
        Table = 10012,
        TableItem = 10013,
        Text = 10014,
        Toggle = 10015,
        Transform = 10016,
        ScrollItem = 10017,
        LegacyIAccessible = 10018,
        ItemContainer = 10019,
        VirtualizedItem = 10020,
        SynchronizedInput = 10021,
        ObjectModel = 10022,
        Annotation = 10023,
        Text2 = 10024,
        Styles = 10025,
        Spreadsheet = 10026,
        SpreadsheetItem = 10027,
        Transform2 = 10028,
        TextChild = 10029,
        Drag = 10030,
        DropTarget = 10031,
        TextEdit = 10032,
        CustomNavigation = 10033,
        Selection2 = 10034,
    };
    enum class AutomationPropertyId : int32_t
    {
        RuntimeId = 30000,
        BoundingRectangle = 30001,
        ProcessId = 30002,
        ControlType = 30003,
        LocalizedControlType = 30004,
        Name = 30005,
        AcceleratorKey = 30006,
        AccessKey = 30007,
        HasKeyboardFocus = 30008,
        IsKeyboardFocusable = 30009,
        IsEnabled = 30010,
        AutomationId = 30011,
        ClassName = 30012,
        HelpText = 30013,
        ClickablePoint = 30014,
        Culture = 30015,
        IsControlElement = 30016,
        IsContentElement = 30017,
        LabeledBy = 30018,
        IsPassword = 30019,
        NativeWindowHandle = 30020,
        ItemType = 30021,
        IsOffscreen = 30022,
        Orientation = 30023,
        FrameworkId = 30024,
        IsRequiredForForm = 30025,
        ItemStatus = 30026,
        IsDockPatternAvailable = 30027,
        IsExpandCollapsePatternAvailable = 30028,
        IsGridItemPatternAvailable = 30029,
        IsGridPatternAvailable = 30030,
        IsInvokePatternAvailable = 30031,
        IsMultipleViewPatternAvailable = 30032,
        IsRangeValuePatternAvailable = 30033,
        IsScrollPatternAvailable = 30034,
        IsScrollItemPatternAvailable = 30035,
        IsSelectionItemPatternAvailable = 30036,
        IsSelectionPatternAvailable = 30037,
        IsTablePatternAvailable = 30038,
        IsTableItemPatternAvailable = 30039,
        IsTextPatternAvailable = 30040,
        IsTogglePatternAvailable = 30041,
        IsTransformPatternAvailable = 30042,
        IsValuePatternAvailable = 30043,
        IsWindowPatternAvailable = 30044,
        ValueValue = 30045,
        ValueIsReadOnly = 30046,
        RangeValueValue = 30047,
        RangeValueIsReadOnly = 30048,
        RangeValueMinimum = 30049,
        RangeValueMaximum = 30050,
        RangeValueLargeChange = 30051,
        RangeValueSmallChange = 30052,
        ScrollHorizontalScrollPercent = 30053,
        ScrollHorizontalViewSize = 30054,
        ScrollVerticalScrollPercent = 30055,
        ScrollVerticalViewSize = 30056,
        ScrollHorizontallyScrollable = 30057,
        ScrollVerticallyScrollable = 30058,
        SelectionSelection = 30059,
        SelectionCanSelectMultiple = 30060,
        SelectionIsSelectionRequired = 30061,
        GridRowCount = 30062,
        GridColumnCount = 30063,
        GridItemRow = 30064,
        GridItemColumn = 30065,
        GridItemRowSpan = 30066,
        GridItemColumnSpan = 30067,
        GridItemContainingGrid = 30068,
        DockDockPosition = 30069,
        ExpandCollapseExpandCollapseState = 30070,
        MultipleViewCurrentView = 30071,
        MultipleViewSupportedViews = 30072,
        WindowCanMaximize = 30073,
        WindowCanMinimize = 30074,
        WindowWindowVisualState = 30075,
        WindowWindowInteractionState = 30076,
        WindowIsModal = 30077,
        WindowIsTopmost = 30078,
        SelectionItemIsSelected = 30079,
        SelectionItemSelectionContainer = 30080,
        TableRowHeaders = 30081,
        TableColumnHeaders = 30082,
        TableRowOrColumnMajor = 30083,
        TableItemRowHeaderItems = 30084,
        TableItemColumnHeaderItems = 30085,
        ToggleToggleState = 30086,
        TransformCanMove = 30087,
        TransformCanResize = 30088,
        TransformCanRotate = 30089,
        IsLegacyIAccessiblePatternAvailable = 30090,
        LegacyIAccessibleChildId = 30091,
        LegacyIAccessibleName = 30092,
        LegacyIAccessibleValue = 30093,
        LegacyIAccessibleDescription = 30094,
        LegacyIAccessibleRole = 30095,
        LegacyIAccessibleState = 30096,
        LegacyIAccessibleHelp = 30097,
        LegacyIAccessibleKeyboardShortcut = 30098,
        LegacyIAccessibleSelection = 30099,
        LegacyIAccessibleDefaultAction = 30100,
        AriaRole = 30101,
        AriaProperties = 30102,
        IsDataValidForForm = 30103,
        ControllerFor = 30104,
        DescribedBy = 30105,
        FlowsTo = 30106,
        ProviderDescription = 30107,
        IsItemContainerPatternAvailable = 30108,
        IsVirtualizedItemPatternAvailable = 30109,
        IsSynchronizedInputPatternAvailable = 30110,
        OptimizeForVisualContent = 30111,
        IsObjectModelPatternAvailable = 30112,
        AnnotationAnnotationTypeId = 30113,
        AnnotationAnnotationTypeName = 30114,
        AnnotationAuthor = 30115,
        AnnotationDateTime = 30116,
        AnnotationTarget = 30117,
        IsAnnotationPatternAvailable = 30118,
        IsTextPattern2Available = 30119,
        StylesStyleId = 30120,
        StylesStyleName = 30121,
        StylesFillColor = 30122,
        StylesFillPatternStyle = 30123,
        StylesShape = 30124,
        StylesFillPatternColor = 30125,
        StylesExtendedProperties = 30126,
        IsStylesPatternAvailable = 30127,
        IsSpreadsheetPatternAvailable = 30128,
        SpreadsheetItemFormula = 30129,
        SpreadsheetItemAnnotationObjects = 30130,
        SpreadsheetItemAnnotationTypes = 30131,
        IsSpreadsheetItemPatternAvailable = 30132,
        Transform2CanZoom = 30133,
        IsTransformPattern2Available = 30134,
        LiveSetting = 30135,
        IsTextChildPatternAvailable = 30136,
        IsDragPatternAvailable = 30137,
        DragIsGrabbed = 30138,
        DragDropEffect = 30139,
        DragDropEffects = 30140,
        IsDropTargetPatternAvailable = 30141,
        DropTargetDropTargetEffect = 30142,
        DropTargetDropTargetEffects = 30143,
        DragGrabbedItems = 30144,
        Transform2ZoomLevel = 30145,
        Transform2ZoomMinimum = 30146,
        Transform2ZoomMaximum = 30147,
        FlowsFrom = 30148,
        IsTextEditPatternAvailable = 30149,
        IsPeripheral = 30150,
        IsCustomNavigationPatternAvailable = 30151,
        PositionInSet = 30152,
        SizeOfSet = 30153,
        Level = 30154,
        AnnotationTypes = 30155,
        AnnotationObjects = 30156,
        LandmarkType = 30157,
        LocalizedLandmarkType = 30158,
        FullDescription = 30159,
        FillColor = 30160,
        OutlineColor = 30161,
        FillType = 30162,
        VisualEffects = 30163,
        OutlineThickness = 30164,
        CenterPoint = 30165,
        Rotation = 30166,
        Size = 30167,
        IsSelectionPattern2Available = 30168,
        Selection2FirstSelectedItem = 30169,
        Selection2LastSelectedItem = 30170,
        Selection2CurrentSelectedItem = 30171,
        Selection2ItemCount = 30172,
        HeadingLevel = 30173,
        IsDialog = 30174,
    };
    enum class AutomationRowOrColumnMajor : int32_t
    {
        RowMajor = 0,
        ColumnMajor = 1,
        Indeterminate = 2,
    };
    enum class AutomationSayAsInterpretAs : int32_t
    {
        None = 0,
        Spell = 1,
        Cardinal = 2,
        Ordinal = 3,
        Number = 4,
        Date = 5,
        Time = 6,
        Telephone = 7,
        Currency = 8,
        Net = 9,
        Url = 10,
        Address = 11,
        Alphanumeric = 12,
        Name = 13,
        Media = 14,
        Date_MonthDayYear = 15,
        Date_DayMonthYear = 16,
        Date_YearMonthDay = 17,
        Date_YearMonth = 18,
        Date_MonthYear = 19,
        Date_DayMonth = 20,
        Date_MonthDay = 21,
        Date_Year = 22,
        Time_HoursMinutesSeconds12 = 23,
        Time_HoursMinutes12 = 24,
        Time_HoursMinutesSeconds24 = 25,
        Time_HoursMinutes24 = 26,
    };
    enum class AutomationScrollAmount : int32_t
    {
        LargeDecrement = 0,
        SmallDecrement = 1,
        NoAmount = 2,
        LargeIncrement = 3,
        SmallIncrement = 4,
    };
    enum class AutomationStyleId : int32_t
    {
        Custom = 70000,
        Heading1 = 70001,
        Heading2 = 70002,
        Heading3 = 70003,
        Heading4 = 70004,
        Heading5 = 70005,
        Heading6 = 70006,
        Heading7 = 70007,
        Heading8 = 70008,
        Heading9 = 70009,
        Title = 70010,
        Subtitle = 70011,
        Normal = 70012,
        Emphasis = 70013,
        Quote = 70014,
        BulletedList = 70015,
        NumberedList = 70016,
    };
    enum class AutomationSupportedTextSelection : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class AutomationSynchronizedInputType : int32_t
    {
        KeyUp = 1,
        KeyDown = 2,
        LeftMouseUp = 4,
        LeftMouseDown = 8,
        RightMouseUp = 16,
        RightMouseDown = 32,
    };
    enum class AutomationTextAttributeId : int32_t
    {
        AnimationStyle = 40000,
        BackgroundColor = 40001,
        BulletStyle = 40002,
        CapStyle = 40003,
        Culture = 40004,
        FontName = 40005,
        FontSize = 40006,
        FontWeight = 40007,
        ForegroundColor = 40008,
        HorizontalTextAlignment = 40009,
        IndentationFirstLine = 40010,
        IndentationLeading = 40011,
        IndentationTrailing = 40012,
        IsHidden = 40013,
        IsItalic = 40014,
        IsReadOnly = 40015,
        IsSubscript = 40016,
        IsSuperscript = 40017,
        MarginBottom = 40018,
        MarginLeading = 40019,
        MarginTop = 40020,
        MarginTrailing = 40021,
        OutlineStyles = 40022,
        OverlineColor = 40023,
        OverlineStyle = 40024,
        StrikethroughColor = 40025,
        StrikethroughStyle = 40026,
        Tabs = 40027,
        TextFlowDirections = 40028,
        UnderlineColor = 40029,
        UnderlineStyle = 40030,
        AnnotationTypes = 40031,
        AnnotationObjects = 40032,
        StyleName = 40033,
        StyleId = 40034,
        Link = 40035,
        IsActive = 40036,
        SelectionActiveEnd = 40037,
        CaretPosition = 40038,
        CaretBidiMode = 40039,
        LineSpacing = 40040,
        BeforeParagraphSpacing = 40041,
        AfterParagraphSpacing = 40042,
        SayAsInterpretAs = 40043,
    };
    enum class AutomationTextDecorationLineStyle : int32_t
    {
        None = 0,
        Single = 1,
        WordsOnly = 2,
        Double = 3,
        Dot = 4,
        Dash = 5,
        DashDot = 6,
        DashDotDot = 7,
        Wavy = 8,
        ThickSingle = 9,
        DoubleWavy = 11,
        ThickWavy = 12,
        LongDash = 13,
        ThickDash = 14,
        ThickDashDot = 15,
        ThickDashDotDot = 16,
        ThickDot = 17,
        ThickLongDash = 18,
        Other = -1,
    };
    enum class AutomationTextPatternRangeEndpoint : int32_t
    {
        Start = 0,
        End = 1,
    };
    enum class AutomationTextUnit : int32_t
    {
        Character = 0,
        Format = 1,
        Word = 2,
        Line = 3,
        Paragraph = 4,
        Page = 5,
        Document = 6,
    };
    enum class AutomationToggleState : int32_t
    {
        Off = 0,
        On = 1,
        Indeterminate = 2,
    };
    enum class AutomationWindowInteractionState : int32_t
    {
        Running = 0,
        Closing = 1,
        ReadyForUserInteraction = 2,
        BlockedByModalWindow = 3,
        NotResponding = 4,
    };
    enum class AutomationWindowVisualState : int32_t
    {
        Normal = 0,
        Maximized = 1,
        Minimized = 2,
    };
    enum class AutomationZoomUnit : int32_t
    {
        NoAmount = 0,
        LargeDecrement = 1,
        SmallDecrement = 2,
        LargeIncrement = 3,
        SmallIncrement = 4,
    };
    struct IAutomationRemoteActiveEnd;
    struct IAutomationRemoteAnimationStyle;
    struct IAutomationRemoteAnnotationPattern;
    struct IAutomationRemoteAnnotationType;
    struct IAutomationRemoteAnyObject;
    struct IAutomationRemoteArray;
    struct IAutomationRemoteBool;
    struct IAutomationRemoteBulletStyle;
    struct IAutomationRemoteByteArray;
    struct IAutomationRemoteCacheRequest;
    struct IAutomationRemoteCapStyle;
    struct IAutomationRemoteCaretBidiMode;
    struct IAutomationRemoteCaretPosition;
    struct IAutomationRemoteChar;
    struct IAutomationRemoteConnectionBoundObject;
    struct IAutomationRemoteControlType;
    struct IAutomationRemoteCustomNavigationPattern;
    struct IAutomationRemoteDockPattern;
    struct IAutomationRemoteDockPosition;
    struct IAutomationRemoteDouble;
    struct IAutomationRemoteDragPattern;
    struct IAutomationRemoteDropTargetPattern;
    struct IAutomationRemoteElement;
    struct IAutomationRemoteExpandCollapsePattern;
    struct IAutomationRemoteExpandCollapseState;
    struct IAutomationRemoteExtensionTarget;
    struct IAutomationRemoteExtensionTargetFactory;
    struct IAutomationRemoteFlowDirections;
    struct IAutomationRemoteGridItemPattern;
    struct IAutomationRemoteGridPattern;
    struct IAutomationRemoteGuid;
    struct IAutomationRemoteHeadingLevel;
    struct IAutomationRemoteHorizontalTextAlignment;
    struct IAutomationRemoteInt;
    struct IAutomationRemoteInvokePattern;
    struct IAutomationRemoteItemContainerPattern;
    struct IAutomationRemoteLandmarkType;
    struct IAutomationRemoteLegacyIAccessiblePattern;
    struct IAutomationRemoteLiveSetting;
    struct IAutomationRemoteMetadata;
    struct IAutomationRemoteMultipleViewPattern;
    struct IAutomationRemoteNavigateDirection;
    struct IAutomationRemoteObject;
    struct IAutomationRemoteObjectFactory;
    struct IAutomationRemoteOperation;
    struct IAutomationRemoteOperationResultSet;
    struct IAutomationRemoteOrientationType;
    struct IAutomationRemoteOutlineStyles;
    struct IAutomationRemotePatternId;
    struct IAutomationRemotePoint;
    struct IAutomationRemotePropertyId;
    struct IAutomationRemoteRangeValuePattern;
    struct IAutomationRemoteRect;
    struct IAutomationRemoteRowOrColumnMajor;
    struct IAutomationRemoteSayAsInterpretAs;
    struct IAutomationRemoteScrollAmount;
    struct IAutomationRemoteScrollItemPattern;
    struct IAutomationRemoteScrollPattern;
    struct IAutomationRemoteSelectionItemPattern;
    struct IAutomationRemoteSelectionPattern;
    struct IAutomationRemoteSelectionPattern2;
    struct IAutomationRemoteSpreadsheetItemPattern;
    struct IAutomationRemoteSpreadsheetPattern;
    struct IAutomationRemoteString;
    struct IAutomationRemoteStringMap;
    struct IAutomationRemoteStyleId;
    struct IAutomationRemoteStylesPattern;
    struct IAutomationRemoteSupportedTextSelection;
    struct IAutomationRemoteSynchronizedInputPattern;
    struct IAutomationRemoteSynchronizedInputType;
    struct IAutomationRemoteTableItemPattern;
    struct IAutomationRemoteTablePattern;
    struct IAutomationRemoteTextAttributeId;
    struct IAutomationRemoteTextChildPattern;
    struct IAutomationRemoteTextDecorationLineStyle;
    struct IAutomationRemoteTextEditPattern;
    struct IAutomationRemoteTextPattern;
    struct IAutomationRemoteTextPattern2;
    struct IAutomationRemoteTextPatternRangeEndpoint;
    struct IAutomationRemoteTextRange;
    struct IAutomationRemoteTextUnit;
    struct IAutomationRemoteTogglePattern;
    struct IAutomationRemoteToggleState;
    struct IAutomationRemoteTransformPattern;
    struct IAutomationRemoteTransformPattern2;
    struct IAutomationRemoteUint;
    struct IAutomationRemoteValuePattern;
    struct IAutomationRemoteVirtualizedItemPattern;
    struct IAutomationRemoteWindowInteractionState;
    struct IAutomationRemoteWindowPattern;
    struct IAutomationRemoteWindowVisualState;
    struct IAutomationRemoteZoomUnit;
    struct AutomationRemoteActiveEnd;
    struct AutomationRemoteAnimationStyle;
    struct AutomationRemoteAnnotationPattern;
    struct AutomationRemoteAnnotationType;
    struct AutomationRemoteAnyObject;
    struct AutomationRemoteArray;
    struct AutomationRemoteBool;
    struct AutomationRemoteBulletStyle;
    struct AutomationRemoteByteArray;
    struct AutomationRemoteCacheRequest;
    struct AutomationRemoteCapStyle;
    struct AutomationRemoteCaretBidiMode;
    struct AutomationRemoteCaretPosition;
    struct AutomationRemoteChar;
    struct AutomationRemoteConnectionBoundObject;
    struct AutomationRemoteControlType;
    struct AutomationRemoteCustomNavigationPattern;
    struct AutomationRemoteDockPattern;
    struct AutomationRemoteDockPosition;
    struct AutomationRemoteDouble;
    struct AutomationRemoteDragPattern;
    struct AutomationRemoteDropTargetPattern;
    struct AutomationRemoteElement;
    struct AutomationRemoteExpandCollapsePattern;
    struct AutomationRemoteExpandCollapseState;
    struct AutomationRemoteExtensionTarget;
    struct AutomationRemoteFlowDirections;
    struct AutomationRemoteGridItemPattern;
    struct AutomationRemoteGridPattern;
    struct AutomationRemoteGuid;
    struct AutomationRemoteHeadingLevel;
    struct AutomationRemoteHorizontalTextAlignment;
    struct AutomationRemoteInt;
    struct AutomationRemoteInvokePattern;
    struct AutomationRemoteItemContainerPattern;
    struct AutomationRemoteLandmarkType;
    struct AutomationRemoteLegacyIAccessiblePattern;
    struct AutomationRemoteLiveSetting;
    struct AutomationRemoteMetadata;
    struct AutomationRemoteMultipleViewPattern;
    struct AutomationRemoteNavigateDirection;
    struct AutomationRemoteObject;
    struct AutomationRemoteOperation;
    struct AutomationRemoteOperationResultSet;
    struct AutomationRemoteOrientationType;
    struct AutomationRemoteOutlineStyles;
    struct AutomationRemotePatternId;
    struct AutomationRemotePoint;
    struct AutomationRemotePropertyId;
    struct AutomationRemoteRangeValuePattern;
    struct AutomationRemoteRect;
    struct AutomationRemoteRowOrColumnMajor;
    struct AutomationRemoteSayAsInterpretAs;
    struct AutomationRemoteScrollAmount;
    struct AutomationRemoteScrollItemPattern;
    struct AutomationRemoteScrollPattern;
    struct AutomationRemoteSelectionItemPattern;
    struct AutomationRemoteSelectionPattern;
    struct AutomationRemoteSelectionPattern2;
    struct AutomationRemoteSpreadsheetItemPattern;
    struct AutomationRemoteSpreadsheetPattern;
    struct AutomationRemoteString;
    struct AutomationRemoteStringMap;
    struct AutomationRemoteStyleId;
    struct AutomationRemoteStylesPattern;
    struct AutomationRemoteSupportedTextSelection;
    struct AutomationRemoteSynchronizedInputPattern;
    struct AutomationRemoteSynchronizedInputType;
    struct AutomationRemoteTableItemPattern;
    struct AutomationRemoteTablePattern;
    struct AutomationRemoteTextAttributeId;
    struct AutomationRemoteTextChildPattern;
    struct AutomationRemoteTextDecorationLineStyle;
    struct AutomationRemoteTextEditPattern;
    struct AutomationRemoteTextPattern;
    struct AutomationRemoteTextPattern2;
    struct AutomationRemoteTextPatternRangeEndpoint;
    struct AutomationRemoteTextRange;
    struct AutomationRemoteTextUnit;
    struct AutomationRemoteTogglePattern;
    struct AutomationRemoteToggleState;
    struct AutomationRemoteTransformPattern;
    struct AutomationRemoteTransformPattern2;
    struct AutomationRemoteUint;
    struct AutomationRemoteValuePattern;
    struct AutomationRemoteVirtualizedItemPattern;
    struct AutomationRemoteWindowInteractionState;
    struct AutomationRemoteWindowPattern;
    struct AutomationRemoteWindowVisualState;
    struct AutomationRemoteZoomUnit;
    struct AutomationRemoteOperationResponseToken;
    struct AutomationRemoteOperationScopeHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExtensionTarget>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationActiveEnd>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationAnimationStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationAnnotationType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationBulletStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationCapStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationCaretBidiMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationCaretPosition>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationControlType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationDockPosition>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationExpandCollapseState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationFlowDirections>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationHeadingLevel>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationHorizontalTextAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationLandmarkType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationLiveSetting>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationMetadata>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationNavigateDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationOrientationType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationOutlineStyles>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationPatternId>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationPropertyId>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRowOrColumnMajor>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationSayAsInterpretAs>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationScrollAmount>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationStyleId>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationSupportedTextSelection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationSynchronizedInputType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationTextAttributeId>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationTextDecorationLineStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationTextPatternRangeEndpoint>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationTextUnit>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationToggleState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationWindowInteractionState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationWindowVisualState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationZoomUnit>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken>{ using type = struct_category<int32_t>; };
    template <> struct category<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd> = L"Microsoft.UI.UIAutomation.AutomationRemoteActiveEnd";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle> = L"Microsoft.UI.UIAutomation.AutomationRemoteAnimationStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteAnnotationPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType> = L"Microsoft.UI.UIAutomation.AutomationRemoteAnnotationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject> = L"Microsoft.UI.UIAutomation.AutomationRemoteAnyObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray> = L"Microsoft.UI.UIAutomation.AutomationRemoteArray";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool> = L"Microsoft.UI.UIAutomation.AutomationRemoteBool";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle> = L"Microsoft.UI.UIAutomation.AutomationRemoteBulletStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray> = L"Microsoft.UI.UIAutomation.AutomationRemoteByteArray";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest> = L"Microsoft.UI.UIAutomation.AutomationRemoteCacheRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle> = L"Microsoft.UI.UIAutomation.AutomationRemoteCapStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode> = L"Microsoft.UI.UIAutomation.AutomationRemoteCaretBidiMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition> = L"Microsoft.UI.UIAutomation.AutomationRemoteCaretPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar> = L"Microsoft.UI.UIAutomation.AutomationRemoteChar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject> = L"Microsoft.UI.UIAutomation.AutomationRemoteConnectionBoundObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType> = L"Microsoft.UI.UIAutomation.AutomationRemoteControlType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteCustomNavigationPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteDockPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition> = L"Microsoft.UI.UIAutomation.AutomationRemoteDockPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble> = L"Microsoft.UI.UIAutomation.AutomationRemoteDouble";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteDragPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteDropTargetPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement> = L"Microsoft.UI.UIAutomation.AutomationRemoteElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteExpandCollapsePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState> = L"Microsoft.UI.UIAutomation.AutomationRemoteExpandCollapseState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExtensionTarget> = L"Microsoft.UI.UIAutomation.AutomationRemoteExtensionTarget";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections> = L"Microsoft.UI.UIAutomation.AutomationRemoteFlowDirections";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteGridItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteGridPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid> = L"Microsoft.UI.UIAutomation.AutomationRemoteGuid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel> = L"Microsoft.UI.UIAutomation.AutomationRemoteHeadingLevel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment> = L"Microsoft.UI.UIAutomation.AutomationRemoteHorizontalTextAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt> = L"Microsoft.UI.UIAutomation.AutomationRemoteInt";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteInvokePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteItemContainerPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType> = L"Microsoft.UI.UIAutomation.AutomationRemoteLandmarkType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteLegacyIAccessiblePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting> = L"Microsoft.UI.UIAutomation.AutomationRemoteLiveSetting";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata> = L"Microsoft.UI.UIAutomation.AutomationRemoteMetadata";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteMultipleViewPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection> = L"Microsoft.UI.UIAutomation.AutomationRemoteNavigateDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject> = L"Microsoft.UI.UIAutomation.AutomationRemoteObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperation> = L"Microsoft.UI.UIAutomation.AutomationRemoteOperation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet> = L"Microsoft.UI.UIAutomation.AutomationRemoteOperationResultSet";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType> = L"Microsoft.UI.UIAutomation.AutomationRemoteOrientationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles> = L"Microsoft.UI.UIAutomation.AutomationRemoteOutlineStyles";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId> = L"Microsoft.UI.UIAutomation.AutomationRemotePatternId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint> = L"Microsoft.UI.UIAutomation.AutomationRemotePoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId> = L"Microsoft.UI.UIAutomation.AutomationRemotePropertyId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteRangeValuePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect> = L"Microsoft.UI.UIAutomation.AutomationRemoteRect";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor> = L"Microsoft.UI.UIAutomation.AutomationRemoteRowOrColumnMajor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs> = L"Microsoft.UI.UIAutomation.AutomationRemoteSayAsInterpretAs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount> = L"Microsoft.UI.UIAutomation.AutomationRemoteScrollAmount";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteScrollItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteScrollPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteSelectionItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteSelectionPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2> = L"Microsoft.UI.UIAutomation.AutomationRemoteSelectionPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteSpreadsheetItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteSpreadsheetPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString> = L"Microsoft.UI.UIAutomation.AutomationRemoteString";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap> = L"Microsoft.UI.UIAutomation.AutomationRemoteStringMap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId> = L"Microsoft.UI.UIAutomation.AutomationRemoteStyleId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteStylesPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection> = L"Microsoft.UI.UIAutomation.AutomationRemoteSupportedTextSelection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteSynchronizedInputPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType> = L"Microsoft.UI.UIAutomation.AutomationRemoteSynchronizedInputType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTableItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTablePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextAttributeId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextChildPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextDecorationLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextEditPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextPatternRangeEndpoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextRange";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit> = L"Microsoft.UI.UIAutomation.AutomationRemoteTextUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTogglePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState> = L"Microsoft.UI.UIAutomation.AutomationRemoteToggleState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteTransformPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2> = L"Microsoft.UI.UIAutomation.AutomationRemoteTransformPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint> = L"Microsoft.UI.UIAutomation.AutomationRemoteUint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteValuePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteVirtualizedItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState> = L"Microsoft.UI.UIAutomation.AutomationRemoteWindowInteractionState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern> = L"Microsoft.UI.UIAutomation.AutomationRemoteWindowPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState> = L"Microsoft.UI.UIAutomation.AutomationRemoteWindowVisualState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit> = L"Microsoft.UI.UIAutomation.AutomationRemoteZoomUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationActiveEnd> = L"Microsoft.UI.UIAutomation.AutomationActiveEnd";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationAnimationStyle> = L"Microsoft.UI.UIAutomation.AutomationAnimationStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationAnnotationType> = L"Microsoft.UI.UIAutomation.AutomationAnnotationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationBulletStyle> = L"Microsoft.UI.UIAutomation.AutomationBulletStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationCapStyle> = L"Microsoft.UI.UIAutomation.AutomationCapStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationCaretBidiMode> = L"Microsoft.UI.UIAutomation.AutomationCaretBidiMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationCaretPosition> = L"Microsoft.UI.UIAutomation.AutomationCaretPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationControlType> = L"Microsoft.UI.UIAutomation.AutomationControlType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationDockPosition> = L"Microsoft.UI.UIAutomation.AutomationDockPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationExpandCollapseState> = L"Microsoft.UI.UIAutomation.AutomationExpandCollapseState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationFlowDirections> = L"Microsoft.UI.UIAutomation.AutomationFlowDirections";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationHeadingLevel> = L"Microsoft.UI.UIAutomation.AutomationHeadingLevel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationHorizontalTextAlignment> = L"Microsoft.UI.UIAutomation.AutomationHorizontalTextAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationLandmarkType> = L"Microsoft.UI.UIAutomation.AutomationLandmarkType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationLiveSetting> = L"Microsoft.UI.UIAutomation.AutomationLiveSetting";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationMetadata> = L"Microsoft.UI.UIAutomation.AutomationMetadata";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationNavigateDirection> = L"Microsoft.UI.UIAutomation.AutomationNavigateDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationOrientationType> = L"Microsoft.UI.UIAutomation.AutomationOrientationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationOutlineStyles> = L"Microsoft.UI.UIAutomation.AutomationOutlineStyles";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationPatternId> = L"Microsoft.UI.UIAutomation.AutomationPatternId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationPropertyId> = L"Microsoft.UI.UIAutomation.AutomationPropertyId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRowOrColumnMajor> = L"Microsoft.UI.UIAutomation.AutomationRowOrColumnMajor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationSayAsInterpretAs> = L"Microsoft.UI.UIAutomation.AutomationSayAsInterpretAs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationScrollAmount> = L"Microsoft.UI.UIAutomation.AutomationScrollAmount";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationStyleId> = L"Microsoft.UI.UIAutomation.AutomationStyleId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationSupportedTextSelection> = L"Microsoft.UI.UIAutomation.AutomationSupportedTextSelection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationSynchronizedInputType> = L"Microsoft.UI.UIAutomation.AutomationSynchronizedInputType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationTextAttributeId> = L"Microsoft.UI.UIAutomation.AutomationTextAttributeId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationTextDecorationLineStyle> = L"Microsoft.UI.UIAutomation.AutomationTextDecorationLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationTextPatternRangeEndpoint> = L"Microsoft.UI.UIAutomation.AutomationTextPatternRangeEndpoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationTextUnit> = L"Microsoft.UI.UIAutomation.AutomationTextUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationToggleState> = L"Microsoft.UI.UIAutomation.AutomationToggleState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationWindowInteractionState> = L"Microsoft.UI.UIAutomation.AutomationWindowInteractionState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationWindowVisualState> = L"Microsoft.UI.UIAutomation.AutomationWindowVisualState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationZoomUnit> = L"Microsoft.UI.UIAutomation.AutomationZoomUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken> = L"Microsoft.UI.UIAutomation.AutomationRemoteOperationResponseToken";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd> = L"Microsoft.UI.UIAutomation.IAutomationRemoteActiveEnd";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle> = L"Microsoft.UI.UIAutomation.IAutomationRemoteAnimationStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteAnnotationPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType> = L"Microsoft.UI.UIAutomation.IAutomationRemoteAnnotationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject> = L"Microsoft.UI.UIAutomation.IAutomationRemoteAnyObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray> = L"Microsoft.UI.UIAutomation.IAutomationRemoteArray";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool> = L"Microsoft.UI.UIAutomation.IAutomationRemoteBool";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle> = L"Microsoft.UI.UIAutomation.IAutomationRemoteBulletStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray> = L"Microsoft.UI.UIAutomation.IAutomationRemoteByteArray";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest> = L"Microsoft.UI.UIAutomation.IAutomationRemoteCacheRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle> = L"Microsoft.UI.UIAutomation.IAutomationRemoteCapStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode> = L"Microsoft.UI.UIAutomation.IAutomationRemoteCaretBidiMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition> = L"Microsoft.UI.UIAutomation.IAutomationRemoteCaretPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar> = L"Microsoft.UI.UIAutomation.IAutomationRemoteChar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject> = L"Microsoft.UI.UIAutomation.IAutomationRemoteConnectionBoundObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType> = L"Microsoft.UI.UIAutomation.IAutomationRemoteControlType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteCustomNavigationPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteDockPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition> = L"Microsoft.UI.UIAutomation.IAutomationRemoteDockPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble> = L"Microsoft.UI.UIAutomation.IAutomationRemoteDouble";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteDragPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteDropTargetPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement> = L"Microsoft.UI.UIAutomation.IAutomationRemoteElement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteExpandCollapsePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState> = L"Microsoft.UI.UIAutomation.IAutomationRemoteExpandCollapseState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget> = L"Microsoft.UI.UIAutomation.IAutomationRemoteExtensionTarget";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory> = L"Microsoft.UI.UIAutomation.IAutomationRemoteExtensionTargetFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections> = L"Microsoft.UI.UIAutomation.IAutomationRemoteFlowDirections";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteGridItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteGridPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid> = L"Microsoft.UI.UIAutomation.IAutomationRemoteGuid";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel> = L"Microsoft.UI.UIAutomation.IAutomationRemoteHeadingLevel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment> = L"Microsoft.UI.UIAutomation.IAutomationRemoteHorizontalTextAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt> = L"Microsoft.UI.UIAutomation.IAutomationRemoteInt";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteInvokePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteItemContainerPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType> = L"Microsoft.UI.UIAutomation.IAutomationRemoteLandmarkType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteLegacyIAccessiblePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting> = L"Microsoft.UI.UIAutomation.IAutomationRemoteLiveSetting";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata> = L"Microsoft.UI.UIAutomation.IAutomationRemoteMetadata";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteMultipleViewPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection> = L"Microsoft.UI.UIAutomation.IAutomationRemoteNavigateDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject> = L"Microsoft.UI.UIAutomation.IAutomationRemoteObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory> = L"Microsoft.UI.UIAutomation.IAutomationRemoteObjectFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation> = L"Microsoft.UI.UIAutomation.IAutomationRemoteOperation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet> = L"Microsoft.UI.UIAutomation.IAutomationRemoteOperationResultSet";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType> = L"Microsoft.UI.UIAutomation.IAutomationRemoteOrientationType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles> = L"Microsoft.UI.UIAutomation.IAutomationRemoteOutlineStyles";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId> = L"Microsoft.UI.UIAutomation.IAutomationRemotePatternId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint> = L"Microsoft.UI.UIAutomation.IAutomationRemotePoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId> = L"Microsoft.UI.UIAutomation.IAutomationRemotePropertyId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteRangeValuePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect> = L"Microsoft.UI.UIAutomation.IAutomationRemoteRect";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor> = L"Microsoft.UI.UIAutomation.IAutomationRemoteRowOrColumnMajor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSayAsInterpretAs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount> = L"Microsoft.UI.UIAutomation.IAutomationRemoteScrollAmount";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteScrollItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteScrollPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSelectionItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSelectionPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSelectionPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSpreadsheetItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSpreadsheetPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString> = L"Microsoft.UI.UIAutomation.IAutomationRemoteString";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap> = L"Microsoft.UI.UIAutomation.IAutomationRemoteStringMap";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId> = L"Microsoft.UI.UIAutomation.IAutomationRemoteStyleId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteStylesPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSupportedTextSelection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSynchronizedInputPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType> = L"Microsoft.UI.UIAutomation.IAutomationRemoteSynchronizedInputType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTableItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTablePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextAttributeId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextChildPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextDecorationLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextEditPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextPatternRangeEndpoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextRange";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTextUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTogglePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState> = L"Microsoft.UI.UIAutomation.IAutomationRemoteToggleState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTransformPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2> = L"Microsoft.UI.UIAutomation.IAutomationRemoteTransformPattern2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint> = L"Microsoft.UI.UIAutomation.IAutomationRemoteUint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteValuePattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteVirtualizedItemPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState> = L"Microsoft.UI.UIAutomation.IAutomationRemoteWindowInteractionState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern> = L"Microsoft.UI.UIAutomation.IAutomationRemoteWindowPattern";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState> = L"Microsoft.UI.UIAutomation.IAutomationRemoteWindowVisualState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit> = L"Microsoft.UI.UIAutomation.IAutomationRemoteZoomUnit";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler> = L"Microsoft.UI.UIAutomation.AutomationRemoteOperationScopeHandler";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd>{ 0x67A197E0,0x9D7C,0x5A3E,{ 0xA2,0x53,0x25,0x87,0x11,0xBF,0x81,0xD8 } }; // 67A197E0-9D7C-5A3E-A253-258711BF81D8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle>{ 0x24A786BB,0x94F3,0x59BE,{ 0x8B,0x83,0x80,0x3C,0x47,0xED,0xBD,0x2B } }; // 24A786BB-94F3-59BE-8B83-803C47EDBD2B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern>{ 0x673C0C25,0x0076,0x58B4,{ 0xAE,0x08,0xEA,0xC2,0xC4,0xD2,0x45,0xB9 } }; // 673C0C25-0076-58B4-AE08-EAC2C4D245B9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType>{ 0x8B1DF24C,0x73CD,0x5D9F,{ 0xB6,0x4A,0xA6,0xA4,0x15,0xC8,0xF9,0x29 } }; // 8B1DF24C-73CD-5D9F-B64A-A6A415C8F929
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject>{ 0xCD2B7E3E,0xCE18,0x583D,{ 0x85,0xBC,0xAD,0x88,0x63,0x94,0xC8,0xEF } }; // CD2B7E3E-CE18-583D-85BC-AD886394C8EF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray>{ 0xC7B05CB2,0xF658,0x5F41,{ 0x97,0x75,0x91,0x69,0x78,0xFF,0x1F,0x54 } }; // C7B05CB2-F658-5F41-9775-916978FF1F54
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool>{ 0xD4924DFD,0x0811,0x5E54,{ 0xBE,0xE9,0x69,0x81,0xAE,0xCF,0xEC,0x24 } }; // D4924DFD-0811-5E54-BEE9-6981AECFEC24
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle>{ 0x4ECC9658,0x3E90,0x51BC,{ 0xB8,0x48,0x92,0x97,0xF6,0x4C,0xFF,0x99 } }; // 4ECC9658-3E90-51BC-B848-9297F64CFF99
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray>{ 0x7EA90ED6,0xF84E,0x5BA7,{ 0x81,0x5A,0x06,0xB5,0x5F,0xB1,0x9B,0xC8 } }; // 7EA90ED6-F84E-5BA7-815A-06B55FB19BC8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest>{ 0x655A492D,0xD6E3,0x562F,{ 0x93,0x4F,0xF0,0x59,0x6B,0xB7,0x9D,0x2C } }; // 655A492D-D6E3-562F-934F-F0596BB79D2C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle>{ 0x57458874,0xFE09,0x5265,{ 0xA2,0xF7,0x96,0xCA,0xD8,0x55,0xED,0x59 } }; // 57458874-FE09-5265-A2F7-96CAD855ED59
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode>{ 0x55662EE2,0x84EB,0x59D6,{ 0xB8,0x7C,0x50,0x6F,0x81,0x74,0xA1,0x63 } }; // 55662EE2-84EB-59D6-B87C-506F8174A163
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition>{ 0x8C00C1C3,0x5D7D,0x5B47,{ 0xBC,0xD6,0x2B,0x60,0x2B,0x93,0x33,0x31 } }; // 8C00C1C3-5D7D-5B47-BCD6-2B602B933331
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar>{ 0x165CFA51,0x6572,0x50F6,{ 0x9C,0x07,0x95,0x74,0x05,0x91,0xFE,0xBE } }; // 165CFA51-6572-50F6-9C07-95740591FEBE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject>{ 0x1F4EF27B,0x256E,0x5277,{ 0xA2,0xCE,0xCC,0xD7,0x3B,0xE9,0x09,0x49 } }; // 1F4EF27B-256E-5277-A2CE-CCD73BE90949
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType>{ 0x21B560AD,0x8F09,0x5EB4,{ 0x98,0x73,0xAD,0x78,0x32,0xFE,0x69,0x7B } }; // 21B560AD-8F09-5EB4-9873-AD7832FE697B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern>{ 0x9289B902,0xEA8F,0x5AC5,{ 0x9C,0x42,0x16,0x1A,0x67,0x21,0xE4,0x6E } }; // 9289B902-EA8F-5AC5-9C42-161A6721E46E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern>{ 0x8C994BF6,0x1477,0x5128,{ 0xAA,0xB7,0x35,0xC1,0x88,0x29,0x46,0x60 } }; // 8C994BF6-1477-5128-AAB7-35C188294660
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition>{ 0xD1DA221D,0x91EA,0x5E82,{ 0xAE,0xEC,0xC4,0xF6,0x0C,0x6D,0xF8,0x65 } }; // D1DA221D-91EA-5E82-AEEC-C4F60C6DF865
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble>{ 0x22291D4B,0x0546,0x5DEB,{ 0x85,0x68,0x25,0x03,0xD5,0x11,0xFE,0x21 } }; // 22291D4B-0546-5DEB-8568-2503D511FE21
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern>{ 0x2944AF96,0xB4AB,0x5E10,{ 0x8C,0x88,0x92,0x25,0x83,0x47,0x91,0x20 } }; // 2944AF96-B4AB-5E10-8C88-922583479120
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern>{ 0xCCADDA87,0x17B1,0x5256,{ 0xA6,0xDB,0xF6,0x7D,0x29,0x2C,0x14,0xFD } }; // CCADDA87-17B1-5256-A6DB-F67D292C14FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement>{ 0x62AD3753,0xFA57,0x5568,{ 0x97,0x7C,0xD9,0x23,0xF5,0xB3,0x5D,0x17 } }; // 62AD3753-FA57-5568-977C-D923F5B35D17
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern>{ 0xEF578528,0x9DEB,0x50FF,{ 0xAF,0xB5,0xE7,0x1D,0x33,0xFF,0x5E,0x5F } }; // EF578528-9DEB-50FF-AFB5-E71D33FF5E5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState>{ 0xFCFCBD00,0x4F66,0x5356,{ 0xA6,0xFF,0x09,0xDD,0x75,0x12,0xE8,0xC2 } }; // FCFCBD00-4F66-5356-A6FF-09DD7512E8C2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget>{ 0x7E7CB1B5,0x38BF,0x5060,{ 0xA9,0x24,0x31,0xA2,0x14,0x09,0x4F,0x6F } }; // 7E7CB1B5-38BF-5060-A924-31A214094F6F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory>{ 0xDBD24A88,0xA08C,0x5047,{ 0x96,0x34,0x7C,0x2E,0xE3,0x74,0xC7,0x1B } }; // DBD24A88-A08C-5047-9634-7C2EE374C71B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections>{ 0x0DA89579,0x6F8D,0x5191,{ 0xB7,0x89,0xC7,0x68,0xAA,0x56,0xE3,0xB2 } }; // 0DA89579-6F8D-5191-B789-C768AA56E3B2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern>{ 0xE7D20FFD,0xDAB7,0x5412,{ 0xB6,0x17,0xCA,0xD8,0xF3,0x6B,0xB9,0x1E } }; // E7D20FFD-DAB7-5412-B617-CAD8F36BB91E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern>{ 0x562819B2,0x6CFC,0x5997,{ 0x9F,0xB6,0xA9,0x5A,0x30,0x1F,0x17,0x75 } }; // 562819B2-6CFC-5997-9FB6-A95A301F1775
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid>{ 0xD50F7E44,0xB6C6,0x5FD8,{ 0xA9,0x9E,0x96,0xC7,0xCC,0xF2,0xAD,0x06 } }; // D50F7E44-B6C6-5FD8-A99E-96C7CCF2AD06
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel>{ 0x8A608B3B,0xC8F8,0x5908,{ 0xBB,0x5D,0xCC,0xD0,0xE1,0xC2,0x93,0x53 } }; // 8A608B3B-C8F8-5908-BB5D-CCD0E1C29353
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment>{ 0xF3E5632E,0x20A8,0x50C7,{ 0x9F,0x59,0x7E,0xBA,0x52,0x88,0x36,0x82 } }; // F3E5632E-20A8-50C7-9F59-7EBA52883682
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt>{ 0xA2952169,0x65CD,0x5A23,{ 0xBD,0x4C,0x1A,0x14,0x13,0xE2,0xE6,0x25 } }; // A2952169-65CD-5A23-BD4C-1A1413E2E625
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern>{ 0xD8935CF2,0x0486,0x52A4,{ 0x83,0x21,0xB4,0xA9,0x6E,0xB6,0x03,0x68 } }; // D8935CF2-0486-52A4-8321-B4A96EB60368
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern>{ 0x5DACCC69,0xD1FE,0x53A6,{ 0xAC,0xD8,0xB8,0xC7,0xEA,0xA3,0x9D,0x21 } }; // 5DACCC69-D1FE-53A6-ACD8-B8C7EAA39D21
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType>{ 0xF85F43FE,0xE79E,0x5656,{ 0xB0,0x91,0xD2,0xF4,0xEF,0x35,0x9E,0x9B } }; // F85F43FE-E79E-5656-B091-D2F4EF359E9B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern>{ 0x79FB6AD6,0xB00E,0x5821,{ 0xA2,0x1B,0xC7,0x7C,0xFE,0x84,0xB4,0x4B } }; // 79FB6AD6-B00E-5821-A21B-C77CFE84B44B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting>{ 0x485F4808,0x9760,0x5B03,{ 0xB0,0x20,0xDD,0x21,0x9C,0x46,0x00,0xC6 } }; // 485F4808-9760-5B03-B020-DD219C4600C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata>{ 0x2A8FE0DB,0x848F,0x5E8D,{ 0x99,0x5B,0x68,0xB8,0xBD,0xC0,0x82,0xDD } }; // 2A8FE0DB-848F-5E8D-995B-68B8BDC082DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern>{ 0x68384BE6,0x75E1,0x508E,{ 0x9E,0x02,0x3F,0x34,0x9B,0x8D,0x08,0xC1 } }; // 68384BE6-75E1-508E-9E02-3F349B8D08C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection>{ 0x987C3679,0xD52C,0x56FE,{ 0xA4,0xC7,0xF1,0x86,0x92,0x59,0xB1,0xA5 } }; // 987C3679-D52C-56FE-A4C7-F1869259B1A5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject>{ 0x93F6F2A7,0xA576,0x5B3B,{ 0xAB,0xCC,0x77,0x28,0x22,0x7D,0xA0,0x84 } }; // 93F6F2A7-A576-5B3B-ABCC-7728227DA084
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory>{ 0x9AF3A4FB,0x681C,0x5DBC,{ 0x8F,0x03,0x62,0x90,0x4C,0x14,0x39,0xCD } }; // 9AF3A4FB-681C-5DBC-8F03-62904C1439CD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation>{ 0x04DE5078,0xBDC6,0x57DC,{ 0x8E,0x89,0x72,0x78,0x9E,0x0D,0x24,0x68 } }; // 04DE5078-BDC6-57DC-8E89-72789E0D2468
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet>{ 0xA7C0C30C,0xFD20,0x530D,{ 0x8D,0x23,0x02,0xF7,0x84,0x1D,0x22,0xD7 } }; // A7C0C30C-FD20-530D-8D23-02F7841D22D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType>{ 0x0A17704F,0xCAAE,0x52B8,{ 0x8A,0x4D,0x40,0x5C,0x7E,0x71,0x1B,0x83 } }; // 0A17704F-CAAE-52B8-8A4D-405C7E711B83
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles>{ 0xDA29EB75,0x97DC,0x5F1B,{ 0x80,0x96,0x2D,0x1F,0x2C,0x49,0xB6,0x0E } }; // DA29EB75-97DC-5F1B-8096-2D1F2C49B60E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId>{ 0xF3015D3E,0x22EF,0x50CD,{ 0x9F,0xFE,0x01,0x8C,0x65,0xF4,0xA8,0xA8 } }; // F3015D3E-22EF-50CD-9FFE-018C65F4A8A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint>{ 0xA99686D0,0x8F4D,0x5C28,{ 0x87,0x8C,0x29,0x6C,0xFE,0xDA,0x18,0x74 } }; // A99686D0-8F4D-5C28-878C-296CFEDA1874
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId>{ 0x3938C3A1,0x4A2B,0x593B,{ 0x91,0x29,0x97,0xB3,0x94,0xA9,0x00,0x7D } }; // 3938C3A1-4A2B-593B-9129-97B394A9007D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern>{ 0x3A94B113,0x7434,0x5F8D,{ 0x92,0x1E,0x00,0x31,0x21,0x38,0x2C,0xE9 } }; // 3A94B113-7434-5F8D-921E-003121382CE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect>{ 0x8C5D1603,0xAABE,0x5957,{ 0xB3,0x25,0xD9,0xC7,0x41,0x22,0xF0,0x43 } }; // 8C5D1603-AABE-5957-B325-D9C74122F043
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor>{ 0x060CA59E,0xE597,0x5DB2,{ 0xB2,0x6C,0x65,0xC2,0x67,0x56,0xF7,0xE6 } }; // 060CA59E-E597-5DB2-B26C-65C26756F7E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs>{ 0x0AB189F8,0x00D8,0x5589,{ 0x86,0x2E,0x3B,0x38,0xC1,0x53,0x2F,0x58 } }; // 0AB189F8-00D8-5589-862E-3B38C1532F58
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount>{ 0x03BE120C,0x66C2,0x5718,{ 0x97,0x44,0xF3,0xA4,0x82,0x0F,0x2F,0x3C } }; // 03BE120C-66C2-5718-9744-F3A4820F2F3C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern>{ 0x34FB910A,0x06A4,0x5AA4,{ 0x8C,0x4D,0xE5,0x06,0x14,0xBF,0x5C,0xF2 } }; // 34FB910A-06A4-5AA4-8C4D-E50614BF5CF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern>{ 0xA6FA1B3A,0x2DD4,0x51C1,{ 0x9A,0xFF,0x08,0x41,0x05,0xE1,0xE4,0x7D } }; // A6FA1B3A-2DD4-51C1-9AFF-084105E1E47D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern>{ 0x8783A3E3,0x76A1,0x597C,{ 0x81,0x5E,0x5E,0xA8,0x23,0xAC,0x67,0xF6 } }; // 8783A3E3-76A1-597C-815E-5EA823AC67F6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern>{ 0x8A50D00B,0xDD95,0x5195,{ 0x86,0x41,0x81,0x9E,0x97,0xD1,0x8E,0x6E } }; // 8A50D00B-DD95-5195-8641-819E97D18E6E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2>{ 0xBB4B3731,0x9A48,0x519A,{ 0x83,0xCE,0x0E,0x7F,0x68,0x3D,0xBD,0x8B } }; // BB4B3731-9A48-519A-83CE-0E7F683DBD8B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern>{ 0xB3AF3E18,0xAC8D,0x5511,{ 0x9C,0xEC,0x2F,0x29,0x5A,0xC9,0x21,0x9D } }; // B3AF3E18-AC8D-5511-9CEC-2F295AC9219D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern>{ 0x2883D935,0xC9AC,0x5517,{ 0xAA,0x4C,0xED,0xC5,0x5A,0xEB,0xBC,0x97 } }; // 2883D935-C9AC-5517-AA4C-EDC55AEBBC97
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString>{ 0xBF6CC9A9,0xE097,0x5F8C,{ 0x84,0x40,0x26,0xBD,0x44,0x16,0x64,0xA7 } }; // BF6CC9A9-E097-5F8C-8440-26BD441664A7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap>{ 0x0ACBD421,0x08CD,0x53E4,{ 0xB2,0x5E,0x7E,0x8F,0x16,0xE4,0x59,0x12 } }; // 0ACBD421-08CD-53E4-B25E-7E8F16E45912
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId>{ 0xB858FE5C,0xA9FC,0x524D,{ 0xA1,0xA8,0x63,0xC6,0xA3,0xB2,0x7E,0xAF } }; // B858FE5C-A9FC-524D-A1A8-63C6A3B27EAF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern>{ 0x8ECB1443,0xE4A5,0x592C,{ 0x8B,0xB7,0xCE,0xF6,0xD2,0xB9,0xA5,0xA6 } }; // 8ECB1443-E4A5-592C-8BB7-CEF6D2B9A5A6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection>{ 0xC7B837E0,0xE115,0x537C,{ 0xA7,0xF1,0xE1,0x10,0xDB,0xF2,0x14,0xA0 } }; // C7B837E0-E115-537C-A7F1-E110DBF214A0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern>{ 0x8F43FBED,0xC2A7,0x503C,{ 0x8F,0x8C,0xDC,0xDF,0xA7,0x39,0xF7,0x2A } }; // 8F43FBED-C2A7-503C-8F8C-DCDFA739F72A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType>{ 0x75267DA6,0x7A11,0x56FE,{ 0x98,0xDB,0x59,0x0B,0xB5,0xDF,0x81,0x8C } }; // 75267DA6-7A11-56FE-98DB-590BB5DF818C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern>{ 0xC1A76A4A,0xA409,0x5BBF,{ 0xBE,0x80,0x13,0x8A,0xE3,0xF4,0x7D,0x8B } }; // C1A76A4A-A409-5BBF-BE80-138AE3F47D8B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern>{ 0x99B5BE1A,0x0E0A,0x58FD,{ 0xAC,0x4F,0x78,0x6A,0x1E,0x90,0x8F,0x59 } }; // 99B5BE1A-0E0A-58FD-AC4F-786A1E908F59
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId>{ 0xC19201B4,0x6496,0x5AED,{ 0xA8,0xBD,0xC4,0x8C,0x9A,0xE6,0x6E,0xF2 } }; // C19201B4-6496-5AED-A8BD-C48C9AE66EF2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern>{ 0xA9FCF8FE,0xD01E,0x5D82,{ 0x98,0xC4,0x35,0xEA,0x82,0xBF,0x93,0xCE } }; // A9FCF8FE-D01E-5D82-98C4-35EA82BF93CE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle>{ 0x31E8B3EA,0x3E81,0x581B,{ 0x80,0x07,0xD6,0x42,0x1C,0x12,0x4B,0x77 } }; // 31E8B3EA-3E81-581B-8007-D6421C124B77
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern>{ 0x287F227D,0x0BE5,0x56C7,{ 0x95,0x6F,0x09,0xBF,0x3A,0x7F,0x24,0xE0 } }; // 287F227D-0BE5-56C7-956F-09BF3A7F24E0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern>{ 0xF97FEAB7,0x3FDB,0x5A27,{ 0xA6,0x5A,0xCF,0x53,0x53,0x92,0x3C,0xC2 } }; // F97FEAB7-3FDB-5A27-A65A-CF5353923CC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2>{ 0xBD290023,0xD4F2,0x5B2A,{ 0xAD,0x28,0xDC,0xE5,0xE1,0x30,0x13,0x11 } }; // BD290023-D4F2-5B2A-AD28-DCE5E1301311
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint>{ 0xD68AB468,0x2EA0,0x5D1E,{ 0xBA,0xAB,0x95,0x7C,0x91,0xCC,0xBD,0x86 } }; // D68AB468-2EA0-5D1E-BAAB-957C91CCBD86
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange>{ 0xC9A80B60,0xFFB4,0x5248,{ 0xA3,0xCE,0x23,0xDA,0xFB,0x8E,0xCE,0x87 } }; // C9A80B60-FFB4-5248-A3CE-23DAFB8ECE87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit>{ 0xFA2178E3,0xDB31,0x5CC3,{ 0x91,0x8E,0xB5,0xD4,0x9A,0xFF,0x4D,0x70 } }; // FA2178E3-DB31-5CC3-918E-B5D49AFF4D70
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern>{ 0x8A72CDAB,0xE2BD,0x5E37,{ 0x88,0x94,0x54,0x67,0x5E,0x6A,0xEC,0x2F } }; // 8A72CDAB-E2BD-5E37-8894-54675E6AEC2F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState>{ 0xE8BCA761,0xF87B,0x5362,{ 0x9D,0x12,0x37,0x41,0xA7,0xE7,0xAA,0x87 } }; // E8BCA761-F87B-5362-9D12-3741A7E7AA87
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern>{ 0xB0394AAB,0xE369,0x5BC2,{ 0x82,0x25,0x70,0x18,0x6D,0xF6,0x24,0x2C } }; // B0394AAB-E369-5BC2-8225-70186DF6242C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2>{ 0x232E1EFC,0x39F8,0x554B,{ 0xB9,0x1A,0xC2,0x4D,0xE6,0xA3,0xF8,0x2C } }; // 232E1EFC-39F8-554B-B91A-C24DE6A3F82C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint>{ 0x6F6CD795,0x20BF,0x53F0,{ 0xA1,0x6A,0x13,0x81,0xBD,0x3A,0x6E,0x56 } }; // 6F6CD795-20BF-53F0-A16A-1381BD3A6E56
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern>{ 0x87292B83,0x91B4,0x59BE,{ 0x8A,0xBA,0x58,0xE9,0x4C,0x7F,0xD2,0xC9 } }; // 87292B83-91B4-59BE-8ABA-58E94C7FD2C9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern>{ 0xA204EC25,0x64D1,0x536B,{ 0x88,0x25,0x18,0xE6,0x69,0x41,0xD3,0x19 } }; // A204EC25-64D1-536B-8825-18E66941D319
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState>{ 0xF8DAE080,0x4B58,0x5203,{ 0xBE,0xFD,0xAA,0x25,0xFA,0xAC,0xA6,0x35 } }; // F8DAE080-4B58-5203-BEFD-AA25FAACA635
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern>{ 0x4D6D1AF6,0x7185,0x56C8,{ 0x86,0x86,0x37,0x8B,0x92,0x7B,0x0B,0x76 } }; // 4D6D1AF6-7185-56C8-8686-378B927B0B76
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState>{ 0xFC55842B,0x35BB,0x5FF6,{ 0x8A,0x62,0x1B,0x6B,0xF3,0xFD,0xD8,0xAA } }; // FC55842B-35BB-5FF6-8A62-1B6BF3FDD8AA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit>{ 0xB5D97466,0x4D81,0x5303,{ 0xA7,0xFE,0xA4,0x79,0x8E,0x18,0xEF,0xCC } }; // B5D97466-4D81-5303-A7FE-A4798E18EFCC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler>{ 0xDB23D463,0x1D8E,0x5EE6,{ 0xAF,0xFC,0xA9,0xFF,0x27,0x8A,0xCA,0x0D } }; // DB23D463-1D8E-5EE6-AFFC-A9FF278ACA0D
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExtensionTarget>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperation>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState; };
    template <> struct default_interface<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit>{ using type = winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit; };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationTypeId(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationTypeName(void**) noexcept = 0;
            virtual int32_t __stdcall GetAuthor(void**) noexcept = 0;
            virtual int32_t __stdcall GetDateTime(void**) noexcept = 0;
            virtual int32_t __stdcall GetTarget(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall LookupGuid(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsNotSupported(void**) noexcept = 0;
            virtual int32_t __stdcall IsMixedAttribute(void**) noexcept = 0;
            virtual int32_t __stdcall IsBool(void**) noexcept = 0;
            virtual int32_t __stdcall AsBool(void**) noexcept = 0;
            virtual int32_t __stdcall IsInt(void**) noexcept = 0;
            virtual int32_t __stdcall AsInt(void**) noexcept = 0;
            virtual int32_t __stdcall IsUint(void**) noexcept = 0;
            virtual int32_t __stdcall AsUint(void**) noexcept = 0;
            virtual int32_t __stdcall IsDouble(void**) noexcept = 0;
            virtual int32_t __stdcall AsDouble(void**) noexcept = 0;
            virtual int32_t __stdcall IsChar(void**) noexcept = 0;
            virtual int32_t __stdcall AsChar(void**) noexcept = 0;
            virtual int32_t __stdcall IsString(void**) noexcept = 0;
            virtual int32_t __stdcall AsString(void**) noexcept = 0;
            virtual int32_t __stdcall IsPoint(void**) noexcept = 0;
            virtual int32_t __stdcall AsPoint(void**) noexcept = 0;
            virtual int32_t __stdcall IsRect(void**) noexcept = 0;
            virtual int32_t __stdcall AsRect(void**) noexcept = 0;
            virtual int32_t __stdcall IsGuid(void**) noexcept = 0;
            virtual int32_t __stdcall AsGuid(void**) noexcept = 0;
            virtual int32_t __stdcall IsArray(void**) noexcept = 0;
            virtual int32_t __stdcall AsArray(void**) noexcept = 0;
            virtual int32_t __stdcall IsStringMap(void**) noexcept = 0;
            virtual int32_t __stdcall AsStringMap(void**) noexcept = 0;
            virtual int32_t __stdcall IsElement(void**) noexcept = 0;
            virtual int32_t __stdcall AsElement(void**) noexcept = 0;
            virtual int32_t __stdcall IsCacheRequest(void**) noexcept = 0;
            virtual int32_t __stdcall AsCacheRequest(void**) noexcept = 0;
            virtual int32_t __stdcall IsByteArray(void**) noexcept = 0;
            virtual int32_t __stdcall AsByteArray(void**) noexcept = 0;
            virtual int32_t __stdcall IsInvokePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsInvokePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSelectionPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsSelectionPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsRangeValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsRangeValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsScrollPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsScrollPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsExpandCollapsePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsExpandCollapsePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsGridPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsGridPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsGridItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsGridItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsMultipleViewPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsMultipleViewPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsWindowPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsWindowPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSelectionItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsSelectionItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsDockPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsDockPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTablePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTablePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTableItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTableItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTextPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTextRange(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextRange(void**) noexcept = 0;
            virtual int32_t __stdcall AsConnectionBoundObject(void**) noexcept = 0;
            virtual int32_t __stdcall IsTogglePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTogglePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTransformPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTransformPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsScrollItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsScrollItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsLegacyIAccessiblePattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsLegacyIAccessiblePattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsItemContainerPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsItemContainerPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsVirtualizedItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsVirtualizedItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSynchronizedInputPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsSynchronizedInputPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsAnnotationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsAnnotationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTextPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall IsStylesPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsStylesPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSpreadsheetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsSpreadsheetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSpreadsheetItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsSpreadsheetItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTransformPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall AsTransformPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall IsTextChildPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextChildPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsDragPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsDragPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsDropTargetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsDropTargetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsTextEditPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextEditPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsCustomNavigationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall AsCustomNavigationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall IsSelectionPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall AsSelectionPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall AsActiveEnd(void**) noexcept = 0;
            virtual int32_t __stdcall AsAnimationStyle(void**) noexcept = 0;
            virtual int32_t __stdcall AsAnnotationType(void**) noexcept = 0;
            virtual int32_t __stdcall AsBulletStyle(void**) noexcept = 0;
            virtual int32_t __stdcall AsCapStyle(void**) noexcept = 0;
            virtual int32_t __stdcall AsCaretBidiMode(void**) noexcept = 0;
            virtual int32_t __stdcall AsCaretPosition(void**) noexcept = 0;
            virtual int32_t __stdcall AsControlType(void**) noexcept = 0;
            virtual int32_t __stdcall AsDockPosition(void**) noexcept = 0;
            virtual int32_t __stdcall AsExpandCollapseState(void**) noexcept = 0;
            virtual int32_t __stdcall AsFlowDirections(void**) noexcept = 0;
            virtual int32_t __stdcall AsHeadingLevel(void**) noexcept = 0;
            virtual int32_t __stdcall AsHorizontalTextAlignment(void**) noexcept = 0;
            virtual int32_t __stdcall AsLandmarkType(void**) noexcept = 0;
            virtual int32_t __stdcall AsLiveSetting(void**) noexcept = 0;
            virtual int32_t __stdcall AsMetadata(void**) noexcept = 0;
            virtual int32_t __stdcall AsNavigateDirection(void**) noexcept = 0;
            virtual int32_t __stdcall AsOrientationType(void**) noexcept = 0;
            virtual int32_t __stdcall AsOutlineStyles(void**) noexcept = 0;
            virtual int32_t __stdcall AsPatternId(void**) noexcept = 0;
            virtual int32_t __stdcall AsPropertyId(void**) noexcept = 0;
            virtual int32_t __stdcall AsRowOrColumnMajor(void**) noexcept = 0;
            virtual int32_t __stdcall AsSayAsInterpretAs(void**) noexcept = 0;
            virtual int32_t __stdcall AsScrollAmount(void**) noexcept = 0;
            virtual int32_t __stdcall AsStyleId(void**) noexcept = 0;
            virtual int32_t __stdcall AsSupportedTextSelection(void**) noexcept = 0;
            virtual int32_t __stdcall AsSynchronizedInputType(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextAttributeId(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextDecorationLineStyle(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextPatternRangeEndpoint(void**) noexcept = 0;
            virtual int32_t __stdcall AsTextUnit(void**) noexcept = 0;
            virtual int32_t __stdcall AsToggleState(void**) noexcept = 0;
            virtual int32_t __stdcall AsWindowInteractionState(void**) noexcept = 0;
            virtual int32_t __stdcall AsWindowVisualState(void**) noexcept = 0;
            virtual int32_t __stdcall AsZoomUnit(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Append(void*) noexcept = 0;
            virtual int32_t __stdcall SetAt(void*, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveAt(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAt(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Size(void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall BoolNot(void**) noexcept = 0;
            virtual int32_t __stdcall BoolAnd(void*, void**) noexcept = 0;
            virtual int32_t __stdcall BoolOr(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall AddProperty(void*) noexcept = 0;
            virtual int32_t __stdcall AddPattern(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall Navigate(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetDockPosition(void**) noexcept = 0;
            virtual int32_t __stdcall SetDockPosition(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Add(void*) noexcept = 0;
            virtual int32_t __stdcall Subtract(void*) noexcept = 0;
            virtual int32_t __stdcall Multiply(void*) noexcept = 0;
            virtual int32_t __stdcall Divide(void*) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetIsGrabbed(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropEffect(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropEffects(void**) noexcept = 0;
            virtual int32_t __stdcall GetGrabbedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetDropTargetEffect(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropTargetEffects(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetPropertyValue(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetPropertyValue2(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetMetadataValue(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetUpdatedCacheElement(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetParentElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetFirstChildElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetLastChildElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetNextSiblingElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetPreviousSiblingElement(void**) noexcept = 0;
            virtual int32_t __stdcall PopulateCache(void*) noexcept = 0;
            virtual int32_t __stdcall GetRuntimeId(void**) noexcept = 0;
            virtual int32_t __stdcall GetProcessId(void**) noexcept = 0;
            virtual int32_t __stdcall GetControlType(void**) noexcept = 0;
            virtual int32_t __stdcall GetLocalizedControlType(void**) noexcept = 0;
            virtual int32_t __stdcall GetName(void**) noexcept = 0;
            virtual int32_t __stdcall GetAcceleratorKey(void**) noexcept = 0;
            virtual int32_t __stdcall GetAccessKey(void**) noexcept = 0;
            virtual int32_t __stdcall GetHasKeyboardFocus(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsKeyboardFocusable(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsEnabled(void**) noexcept = 0;
            virtual int32_t __stdcall GetAutomationId(void**) noexcept = 0;
            virtual int32_t __stdcall GetClassName(void**) noexcept = 0;
            virtual int32_t __stdcall GetHelpText(void**) noexcept = 0;
            virtual int32_t __stdcall GetCulture(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsControlElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsContentElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsPassword(void**) noexcept = 0;
            virtual int32_t __stdcall GetNativeWindowHandle(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemType(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsOffscreen(void**) noexcept = 0;
            virtual int32_t __stdcall GetOrientation(void**) noexcept = 0;
            virtual int32_t __stdcall GetFrameworkId(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsRequiredForForm(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemStatus(void**) noexcept = 0;
            virtual int32_t __stdcall GetBoundingRectangle(void**) noexcept = 0;
            virtual int32_t __stdcall GetLabeledBy(void**) noexcept = 0;
            virtual int32_t __stdcall GetAriaRole(void**) noexcept = 0;
            virtual int32_t __stdcall GetAriaProperties(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsDataValidForForm(void**) noexcept = 0;
            virtual int32_t __stdcall GetControllerFor(void**) noexcept = 0;
            virtual int32_t __stdcall GetDescribedBy(void**) noexcept = 0;
            virtual int32_t __stdcall GetFlowsTo(void**) noexcept = 0;
            virtual int32_t __stdcall GetProviderDescription(void**) noexcept = 0;
            virtual int32_t __stdcall GetOptimizeForVisualContent(void**) noexcept = 0;
            virtual int32_t __stdcall GetLiveSetting(void**) noexcept = 0;
            virtual int32_t __stdcall GetFlowsFrom(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsPeripheral(void**) noexcept = 0;
            virtual int32_t __stdcall GetPositionInSet(void**) noexcept = 0;
            virtual int32_t __stdcall GetSizeOfSet(void**) noexcept = 0;
            virtual int32_t __stdcall GetLevel(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationTypes(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationObjects(void**) noexcept = 0;
            virtual int32_t __stdcall GetLandmarkType(void**) noexcept = 0;
            virtual int32_t __stdcall GetLocalizedLandmarkType(void**) noexcept = 0;
            virtual int32_t __stdcall GetFullDescription(void**) noexcept = 0;
            virtual int32_t __stdcall GetHeadingLevel(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsDialog(void**) noexcept = 0;
            virtual int32_t __stdcall GetInvokePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSelectionPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetRangeValuePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetScrollPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetExpandCollapsePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetGridPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetGridItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetMultipleViewPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetWindowPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSelectionItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetDockPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTablePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTableItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTextPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTogglePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTransformPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetScrollItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetLegacyIAccessiblePattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemContainerPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetVirtualizedItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSynchronizedInputPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTextPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall GetStylesPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSpreadsheetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSpreadsheetItemPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTransformPattern2(void**) noexcept = 0;
            virtual int32_t __stdcall GetTextChildPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetDragPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetDropTargetPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetTextEditPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetCustomNavigationPattern(void**) noexcept = 0;
            virtual int32_t __stdcall GetSelectionPattern2(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetExpandCollapseState(void**) noexcept = 0;
            virtual int32_t __stdcall Expand() noexcept = 0;
            virtual int32_t __stdcall Collapse() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsExtensionTarget(void**) noexcept = 0;
            virtual int32_t __stdcall CallExtension(void*, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall IsExtensionSupported(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetContainingGrid(void**) noexcept = 0;
            virtual int32_t __stdcall GetRow(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumn(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowSpan(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnSpan(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetRowCount(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnCount(void**) noexcept = 0;
            virtual int32_t __stdcall GetItem(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall LookupAnnotationType(void**) noexcept = 0;
            virtual int32_t __stdcall LookupPropertyId(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Add(void*) noexcept = 0;
            virtual int32_t __stdcall Subtract(void*) noexcept = 0;
            virtual int32_t __stdcall Multiply(void*) noexcept = 0;
            virtual int32_t __stdcall Divide(void*) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall Invoke() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall FindItemByProperty(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetChildId(void**) noexcept = 0;
            virtual int32_t __stdcall GetName(void**) noexcept = 0;
            virtual int32_t __stdcall GetValue(void**) noexcept = 0;
            virtual int32_t __stdcall GetDescription(void**) noexcept = 0;
            virtual int32_t __stdcall GetRole(void**) noexcept = 0;
            virtual int32_t __stdcall GetState(void**) noexcept = 0;
            virtual int32_t __stdcall GetHelp(void**) noexcept = 0;
            virtual int32_t __stdcall GetKeyboardShortcut(void**) noexcept = 0;
            virtual int32_t __stdcall GetSelection(void**) noexcept = 0;
            virtual int32_t __stdcall GetDefaultAction(void**) noexcept = 0;
            virtual int32_t __stdcall Select(void*) noexcept = 0;
            virtual int32_t __stdcall DoDefaultAction() noexcept = 0;
            virtual int32_t __stdcall SetValue(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetCurrentView(void**) noexcept = 0;
            virtual int32_t __stdcall GetSupportedViews(void**) noexcept = 0;
            virtual int32_t __stdcall GetViewName(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetCurrentView(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsNull(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall NewEnumWithActiveEnd(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithAnimationStyle(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithAnnotationType(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithBulletStyle(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithCapStyle(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithCaretBidiMode(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithCaretPosition(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithControlType(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithDockPosition(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithExpandCollapseState(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithFlowDirections(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithHeadingLevel(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithHorizontalTextAlignment(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithLandmarkType(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithLiveSetting(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithMetadata(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithNavigateDirection(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithOrientationType(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithOutlineStyles(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithPatternId(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithPropertyId(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithRowOrColumnMajor(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithSayAsInterpretAs(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithScrollAmount(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithStyleId(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithSupportedTextSelection(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithSynchronizedInputType(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithTextAttributeId(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithTextDecorationLineStyle(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithTextPatternRangeEndpoint(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithTextUnit(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithToggleState(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithWindowInteractionState(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithWindowVisualState(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewEnumWithZoomUnit(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewBool(bool, void**) noexcept = 0;
            virtual int32_t __stdcall NewInt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewUint(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewDouble(double, void**) noexcept = 0;
            virtual int32_t __stdcall NewChar(char16_t, void**) noexcept = 0;
            virtual int32_t __stdcall NewString(void*, void**) noexcept = 0;
            virtual int32_t __stdcall NewPoint(winrt::Windows::Foundation::Point, void**) noexcept = 0;
            virtual int32_t __stdcall NewRect(winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall IsGuidSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall NewGuid(winrt::guid, void**) noexcept = 0;
            virtual int32_t __stdcall IsCacheRequestSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall NewCacheRequest(void**) noexcept = 0;
            virtual int32_t __stdcall NewArray(void**) noexcept = 0;
            virtual int32_t __stdcall NewStringMap(void**) noexcept = 0;
            virtual int32_t __stdcall NewNull(void**) noexcept = 0;
            virtual int32_t __stdcall NewEmpty(void**) noexcept = 0;
            virtual int32_t __stdcall NewByteArray(uint32_t, uint8_t*, void**) noexcept = 0;
            virtual int32_t __stdcall IsOpcodeSupported(uint32_t, bool*) noexcept = 0;
            virtual int32_t __stdcall ImportElement(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ImportTextRange(void*, void**) noexcept = 0;
            virtual int32_t __stdcall RequestResponse(void*, struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken*) noexcept = 0;
            virtual int32_t __stdcall IfBlock(void*, void*) noexcept = 0;
            virtual int32_t __stdcall IfBlock2(void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall WhileBlock(void*, void*) noexcept = 0;
            virtual int32_t __stdcall WhileBlock2(void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall BreakLoop() noexcept = 0;
            virtual int32_t __stdcall ContinueLoop() noexcept = 0;
            virtual int32_t __stdcall TryBlock(void*) noexcept = 0;
            virtual int32_t __stdcall TryBlockWithExceptBlock(void*, void*) noexcept = 0;
            virtual int32_t __stdcall GetCurrentFailureCode(void**) noexcept = 0;
            virtual int32_t __stdcall ReturnOperationStatus(winrt::hresult) noexcept = 0;
            virtual int32_t __stdcall ReturnOperationStatusWithRemoteInt(void*) noexcept = 0;
            virtual int32_t __stdcall Execute(void**) noexcept = 0;
            virtual int32_t __stdcall ImportConnectionBoundObject(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OperationStatus(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall HasResult(struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken, bool*) noexcept = 0;
            virtual int32_t __stdcall GetResult(struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetX(void**) noexcept = 0;
            virtual int32_t __stdcall GetY(void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall LookupGuid(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetValue(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsReadOnly(void**) noexcept = 0;
            virtual int32_t __stdcall GetMaximum(void**) noexcept = 0;
            virtual int32_t __stdcall GetMinimum(void**) noexcept = 0;
            virtual int32_t __stdcall GetLargeChange(void**) noexcept = 0;
            virtual int32_t __stdcall GetSmallChange(void**) noexcept = 0;
            virtual int32_t __stdcall SetValue(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetHeight(void**) noexcept = 0;
            virtual int32_t __stdcall GetWidth(void**) noexcept = 0;
            virtual int32_t __stdcall GetX(void**) noexcept = 0;
            virtual int32_t __stdcall GetY(void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalScrollPercent(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalScrollPercent(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalViewSize(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticalViewSize(void**) noexcept = 0;
            virtual int32_t __stdcall GetHorizontallyScrollable(void**) noexcept = 0;
            virtual int32_t __stdcall GetVerticallyScrollable(void**) noexcept = 0;
            virtual int32_t __stdcall Scroll(void*, void*) noexcept = 0;
            virtual int32_t __stdcall SetScrollPercent(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetIsSelected(void**) noexcept = 0;
            virtual int32_t __stdcall GetSelectionContainer(void**) noexcept = 0;
            virtual int32_t __stdcall Select() noexcept = 0;
            virtual int32_t __stdcall AddToSelection() noexcept = 0;
            virtual int32_t __stdcall RemoveFromSelection() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetSelection(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanSelectMultiple(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsSelectionRequired(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetFirstSelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall GetLastSelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall GetCurrentSelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall GetItemCount(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetFormula(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationObjects(void**) noexcept = 0;
            virtual int32_t __stdcall GetAnnotationTypes(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetItemByName(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAt(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Substr(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall Concat(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Size(void**) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall Insert(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Remove(void*, void**) noexcept = 0;
            virtual int32_t __stdcall HasKey(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Lookup(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Size(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetStyleId(void**) noexcept = 0;
            virtual int32_t __stdcall GetStyleName(void**) noexcept = 0;
            virtual int32_t __stdcall GetFillColor(void**) noexcept = 0;
            virtual int32_t __stdcall GetFillPatternStyle(void**) noexcept = 0;
            virtual int32_t __stdcall GetShape(void**) noexcept = 0;
            virtual int32_t __stdcall GetFillPatternColor(void**) noexcept = 0;
            virtual int32_t __stdcall GetExtendedProperties(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall StartListening(void*) noexcept = 0;
            virtual int32_t __stdcall Cancel() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetRowHeaderItems(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnHeaderItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetRowHeaders(void**) noexcept = 0;
            virtual int32_t __stdcall GetColumnHeaders(void**) noexcept = 0;
            virtual int32_t __stdcall GetRowOrColumnMajor(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetTextContainer(void**) noexcept = 0;
            virtual int32_t __stdcall GetTextRange(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetActiveComposition(void**) noexcept = 0;
            virtual int32_t __stdcall GetConversionTarget(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall RangeFromPoint(void*, void**) noexcept = 0;
            virtual int32_t __stdcall RangeFromChild(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetSelection(void**) noexcept = 0;
            virtual int32_t __stdcall GetVisibleRanges(void**) noexcept = 0;
            virtual int32_t __stdcall GetDocumentRange(void**) noexcept = 0;
            virtual int32_t __stdcall GetSupportedTextSelection(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall RangeFromAnnotation(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetCaretRange(void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall Clone(void**) noexcept = 0;
            virtual int32_t __stdcall Compare(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CompareEndpoints(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ExpandToEnclosingUnit(void*) noexcept = 0;
            virtual int32_t __stdcall FindAttribute(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindText(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAttributeValue(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetBoundingRectangles(void**) noexcept = 0;
            virtual int32_t __stdcall GetEnclosingElement(void**) noexcept = 0;
            virtual int32_t __stdcall GetText(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Move(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall MoveEndpointByUnit(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall MoveEndpointByRange(void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall Select() noexcept = 0;
            virtual int32_t __stdcall AddToSelection() noexcept = 0;
            virtual int32_t __stdcall RemoveFromSelection() noexcept = 0;
            virtual int32_t __stdcall ScrollIntoView(void*) noexcept = 0;
            virtual int32_t __stdcall GetChildren(void**) noexcept = 0;
            virtual int32_t __stdcall ShowContextMenu() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetToggleState(void**) noexcept = 0;
            virtual int32_t __stdcall Toggle() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetCanMove(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanResize(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanRotate(void**) noexcept = 0;
            virtual int32_t __stdcall Move(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Resize(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Rotate(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetCanZoom(void**) noexcept = 0;
            virtual int32_t __stdcall GetZoomLevel(void**) noexcept = 0;
            virtual int32_t __stdcall GetZoomMinimum(void**) noexcept = 0;
            virtual int32_t __stdcall GetZoomMaximum(void**) noexcept = 0;
            virtual int32_t __stdcall Zoom(void*) noexcept = 0;
            virtual int32_t __stdcall ZoomByUnit(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsLessThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThan(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsGreaterThanOrEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Add(void*) noexcept = 0;
            virtual int32_t __stdcall Subtract(void*) noexcept = 0;
            virtual int32_t __stdcall Multiply(void*) noexcept = 0;
            virtual int32_t __stdcall Divide(void*) noexcept = 0;
            virtual int32_t __stdcall Stringify(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetValue(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsReadOnly(void**) noexcept = 0;
            virtual int32_t __stdcall SetValue(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall Realize() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall GetCanMaximize(void**) noexcept = 0;
            virtual int32_t __stdcall GetCanMinimize(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsModal(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsTopmost(void**) noexcept = 0;
            virtual int32_t __stdcall GetWindowVisualState(void**) noexcept = 0;
            virtual int32_t __stdcall GetWindowInteractionState(void**) noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
            virtual int32_t __stdcall WaitForInputIdle(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetWindowVisualState(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Set(void*) noexcept = 0;
            virtual int32_t __stdcall IsEqual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsNotEqual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke() noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteActiveEnd
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteActiveEnd<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnimationStyle
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnimationStyle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) GetAnnotationTypeId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAnnotationTypeName() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAuthor() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetDateTime() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetTarget() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) LookupGuid() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotSupported() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsMixedAttribute() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsBool() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) AsBool() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsInt() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) AsInt() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsUint() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) AsUint() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsDouble() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) AsDouble() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsChar() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) AsChar() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsString() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) AsString() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsPoint() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint) AsPoint() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsRect() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) AsRect() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGuid() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) AsGuid() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsArray() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) AsArray() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsStringMap() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap) AsStringMap() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) AsElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsCacheRequest() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest) AsCacheRequest() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsByteArray() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray) AsByteArray() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsInvokePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern) AsInvokePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSelectionPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern) AsSelectionPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern) AsValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsRangeValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern) AsRangeValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsScrollPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern) AsScrollPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsExpandCollapsePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern) AsExpandCollapsePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGridPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern) AsGridPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGridItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern) AsGridItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsMultipleViewPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern) AsMultipleViewPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsWindowPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern) AsWindowPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSelectionItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern) AsSelectionItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsDockPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern) AsDockPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTablePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern) AsTablePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTableItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern) AsTableItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTextPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern) AsTextPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTextRange() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) AsTextRange() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject) AsConnectionBoundObject() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTogglePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern) AsTogglePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTransformPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern) AsTransformPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsScrollItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern) AsScrollItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLegacyIAccessiblePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern) AsLegacyIAccessiblePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsItemContainerPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern) AsItemContainerPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsVirtualizedItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern) AsVirtualizedItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSynchronizedInputPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern) AsSynchronizedInputPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsAnnotationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern) AsAnnotationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTextPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2) AsTextPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsStylesPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern) AsStylesPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSpreadsheetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern) AsSpreadsheetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSpreadsheetItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern) AsSpreadsheetItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTransformPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2) AsTransformPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTextChildPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern) AsTextChildPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsDragPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern) AsDragPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsDropTargetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern) AsDropTargetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsTextEditPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern) AsTextEditPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsCustomNavigationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern) AsCustomNavigationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsSelectionPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2) AsSelectionPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd) AsActiveEnd() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle) AsAnimationStyle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) AsAnnotationType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle) AsBulletStyle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle) AsCapStyle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode) AsCaretBidiMode() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition) AsCaretPosition() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) AsControlType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) AsDockPosition() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) AsExpandCollapseState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections) AsFlowDirections() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) AsHeadingLevel() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment) AsHorizontalTextAlignment() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) AsLandmarkType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) AsLiveSetting() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata) AsMetadata() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection) AsNavigateDirection() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) AsOrientationType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles) AsOutlineStyles() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId) AsPatternId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) AsPropertyId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) AsRowOrColumnMajor() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs) AsSayAsInterpretAs() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount) AsScrollAmount() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) AsStyleId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) AsSupportedTextSelection() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType) AsSynchronizedInputType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId) AsTextAttributeId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle) AsTextDecorationLineStyle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint) AsTextPatternRangeEndpoint() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit) AsTextUnit() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) AsToggleState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) AsWindowInteractionState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) AsWindowVisualState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit) AsZoomUnit() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const;
        WINRT_IMPL_AUTO(void) Append(winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& obj) const;
        WINRT_IMPL_AUTO(void) SetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& obj) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) RemoveAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) GetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) Size() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) BoolNot() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) BoolAnd(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) BoolOr(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteBulletStyle
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteBulletStyle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteByteArray
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteByteArray<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteCacheRequest
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& rhs) const;
        WINRT_IMPL_AUTO(void) AddProperty(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId) const;
        WINRT_IMPL_AUTO(void) AddPattern(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& patternId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteCacheRequest<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteCapStyle
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteCapStyle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretBidiMode
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretBidiMode<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretPosition
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretPosition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteConnectionBoundObject
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteConnectionBoundObject<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteControlType
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteControlType<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteCustomNavigationPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) Navigate(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& direction) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteCustomNavigationPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) GetDockPosition() const;
        WINRT_IMPL_AUTO(void) SetDockPosition(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& dockPos) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPosition
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPosition<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(void) Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(void) Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(void) Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(void) Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsGrabbed() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetDropEffect() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetDropEffects() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetGrabbedItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteDropTargetPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetDropTargetEffect() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetDropTargetEffects() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteDropTargetPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) GetPropertyValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) GetPropertyValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& ignoreDefaultValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) GetMetadataValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& metadata) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetUpdatedCacheElement(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& cacheRequest) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetParentElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetFirstChildElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetLastChildElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetNextSiblingElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetPreviousSiblingElement() const;
        WINRT_IMPL_AUTO(void) PopulateCache(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& cacheRequest) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetRuntimeId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetProcessId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) GetControlType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetLocalizedControlType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetName() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAcceleratorKey() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAccessKey() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetHasKeyboardFocus() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsKeyboardFocusable() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsEnabled() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAutomationId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetClassName() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetHelpText() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetCulture() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsControlElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsContentElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsPassword() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetNativeWindowHandle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetItemType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsOffscreen() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) GetOrientation() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetFrameworkId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsRequiredForForm() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetItemStatus() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) GetBoundingRectangle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetLabeledBy() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAriaRole() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetAriaProperties() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsDataValidForForm() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetControllerFor() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetDescribedBy() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetFlowsTo() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetProviderDescription() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetOptimizeForVisualContent() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) GetLiveSetting() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetFlowsFrom() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsPeripheral() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetPositionInSet() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetSizeOfSet() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetLevel() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetAnnotationTypes() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetAnnotationObjects() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) GetLandmarkType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetLocalizedLandmarkType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetFullDescription() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) GetHeadingLevel() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsDialog() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern) GetInvokePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern) GetSelectionPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern) GetValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern) GetRangeValuePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern) GetScrollPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern) GetExpandCollapsePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern) GetGridPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern) GetGridItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern) GetMultipleViewPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern) GetWindowPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern) GetSelectionItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern) GetDockPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern) GetTablePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern) GetTableItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern) GetTextPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern) GetTogglePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern) GetTransformPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern) GetScrollItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern) GetLegacyIAccessiblePattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern) GetItemContainerPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern) GetVirtualizedItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern) GetSynchronizedInputPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern) GetAnnotationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2) GetTextPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern) GetStylesPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern) GetSpreadsheetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern) GetSpreadsheetItemPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2) GetTransformPattern2() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern) GetTextChildPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern) GetDragPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern) GetDropTargetPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern) GetTextEditPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern) GetCustomNavigationPattern() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2) GetSelectionPattern2() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) GetExpandCollapseState() const;
        WINRT_IMPL_AUTO(void) Expand() const;
        WINRT_IMPL_AUTO(void) Collapse() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapseState
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapseState<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTarget
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsExtensionTarget() const;
        WINRT_IMPL_AUTO(void) CallExtension(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& extensionId, array_view<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const> operands) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsExtensionSupported(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& extensionId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTarget<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTargetFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTargetFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteFlowDirections
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteFlowDirections<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetContainingGrid() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetRow() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetColumn() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetRowSpan() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetColumnSpan() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetRowCount() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetColumnCount() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetItem(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& row, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& column) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) LookupAnnotationType() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) LookupPropertyId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteHeadingLevel
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteHeadingLevel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteHorizontalTextAlignment
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteHorizontalTextAlignment<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(void) Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(void) Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(void) Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(void) Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteInvokePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern const& rhs) const;
        WINRT_IMPL_AUTO(void) Invoke() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteInvokePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteItemContainerPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) FindItemByProperty(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& pStartAfter, winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteItemContainerPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteLandmarkType
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteLandmarkType<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetChildId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetName() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetValue() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetDescription() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) GetRole() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) GetState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetHelp() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetKeyboardShortcut() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetSelection() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetDefaultAction() const;
        WINRT_IMPL_AUTO(void) Select(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& flagsSelect) const;
        WINRT_IMPL_AUTO(void) DoDefaultAction() const;
        WINRT_IMPL_AUTO(void) SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& szValue) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteLiveSetting
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteLiveSetting<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteMetadata
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteMetadata<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetCurrentView() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetSupportedViews() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetViewName(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& view) const;
        WINRT_IMPL_AUTO(void) SetCurrentView(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& view) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteNavigateDirection
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteNavigateDirection<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteObject
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNull() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteObject<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteObjectFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteObjectFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationActiveEnd const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationAnimationStyle const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationAnnotationType const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationBulletStyle const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCapStyle const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCaretBidiMode const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCaretPosition const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationControlType const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationDockPosition const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationExpandCollapseState const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationFlowDirections const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationHeadingLevel const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationHorizontalTextAlignment const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationLandmarkType const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationLiveSetting const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationMetadata const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationNavigateDirection const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationOrientationType const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationOutlineStyles const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationPatternId const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationPropertyId const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationRowOrColumnMajor const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSayAsInterpretAs const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationScrollAmount const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationStyleId const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSupportedTextSelection const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSynchronizedInputType const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextAttributeId const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextDecorationLineStyle const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextPatternRangeEndpoint const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextUnit const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationToggleState const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationWindowInteractionState const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationWindowVisualState const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit) NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationZoomUnit const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) NewBool(bool initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) NewInt(int32_t initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) NewUint(uint32_t initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) NewDouble(double initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) NewChar(char16_t initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) NewString(param::hstring const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint) NewPoint(winrt::Windows::Foundation::Point const& initialValue) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) NewRect(winrt::Windows::Foundation::Rect const& initialValue) const;
        WINRT_IMPL_AUTO(bool) IsGuidSupported() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) NewGuid(winrt::guid const& initialValue) const;
        WINRT_IMPL_AUTO(bool) IsCacheRequestSupported() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest) NewCacheRequest() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) NewArray() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap) NewStringMap() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) NewNull() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) NewEmpty() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray) NewByteArray(array_view<uint8_t const> initialValue) const;
        WINRT_IMPL_AUTO(bool) IsOpcodeSupported(uint32_t opcode) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) ImportElement(winrt::Windows::UI::UIAutomation::AutomationElement const& element) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) ImportTextRange(winrt::Windows::UI::UIAutomation::AutomationTextRange const& textRange) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken) RequestResponse(winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& object) const;
        WINRT_IMPL_AUTO(void) IfBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& trueHandler) const;
        WINRT_IMPL_AUTO(void) IfBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& trueHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& falseHandler) const;
        WINRT_IMPL_AUTO(void) WhileBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopBodyHandler) const;
        WINRT_IMPL_AUTO(void) WhileBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopBodyHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopConditionUpdateHandler) const;
        WINRT_IMPL_AUTO(void) BreakLoop() const;
        WINRT_IMPL_AUTO(void) ContinueLoop() const;
        WINRT_IMPL_AUTO(void) TryBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& tryBlockHandler) const;
        WINRT_IMPL_AUTO(void) TryBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& tryBlockHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& exceptBlockHandler) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetCurrentFailureCode() const;
        WINRT_IMPL_AUTO(void) ReturnOperationStatus(winrt::hresult const& status) const;
        WINRT_IMPL_AUTO(void) ReturnOperationStatus(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& status) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet) Execute() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject) ImportConnectionBoundObject(winrt::Windows::UI::UIAutomation::AutomationConnectionBoundObject const& connectionBoundObject) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::hresult) OperationStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::UIAutomation::Core::AutomationRemoteOperationStatus) Status() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::hresult) ExtendedError() const;
        WINRT_IMPL_AUTO(bool) HasResult(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const& token) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) GetResult(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const& token) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteOrientationType
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteOrientationType<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteOutlineStyles
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteOutlineStyles<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemotePatternId
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemotePatternId<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetX() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetY() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) LookupGuid() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetValue() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsReadOnly() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetMaximum() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetMinimum() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetLargeChange() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetSmallChange() const;
        WINRT_IMPL_AUTO(void) SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& val) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetHeight() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetWidth() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetX() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetY() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteRowOrColumnMajor
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteRowOrColumnMajor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSayAsInterpretAs
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSayAsInterpretAs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollAmount
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollAmount<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(void) ScrollIntoView() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetHorizontalScrollPercent() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetVerticalScrollPercent() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetHorizontalViewSize() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetVerticalViewSize() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetHorizontallyScrollable() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetVerticallyScrollable() const;
        WINRT_IMPL_AUTO(void) Scroll(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& horizontalAmount, winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& verticalAmount) const;
        WINRT_IMPL_AUTO(void) SetScrollPercent(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& horizontalPercent, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& verticalPercent) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsSelected() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetSelectionContainer() const;
        WINRT_IMPL_AUTO(void) Select() const;
        WINRT_IMPL_AUTO(void) AddToSelection() const;
        WINRT_IMPL_AUTO(void) RemoveFromSelection() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetSelection() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanSelectMultiple() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsSelectionRequired() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2 const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetFirstSelectedItem() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetLastSelectedItem() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetCurrentSelectedItem() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetItemCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetFormula() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetAnnotationObjects() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetAnnotationTypes() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetItemByName(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& name) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteString
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) GetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Substr(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index, winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& length) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Concat(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& other) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) Size() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap const& rhs) const;
        WINRT_IMPL_AUTO(void) Insert(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& val) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) Remove(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) HasKey(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) Lookup(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) Size() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteStyleId
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteStyleId<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) GetStyleId() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetStyleName() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetFillColor() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetFillPatternStyle() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetShape() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) GetFillPatternColor() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetExtendedProperties() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSupportedTextSelection
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSupportedTextSelection<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern const& rhs) const;
        WINRT_IMPL_AUTO(void) StartListening(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& inputType) const;
        WINRT_IMPL_AUTO(void) Cancel() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputType
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputType<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTableItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetRowHeaderItems() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetColumnHeaderItems() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTableItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetRowHeaders() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetColumnHeaders() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) GetRowOrColumnMajor() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextAttributeId
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextAttributeId<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextChildPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetTextContainer() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) GetTextRange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextChildPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextDecorationLineStyle
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextDecorationLineStyle<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextEditPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) GetActiveComposition() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) GetConversionTarget() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextEditPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) RangeFromPoint(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& pt) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) RangeFromChild(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& child) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetSelection() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetVisibleRanges() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) GetDocumentRange() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) GetSupportedTextSelection() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern2
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2 const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) RangeFromAnnotation(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& annotation) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) GetCaretRange(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool& isActive) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPatternRangeEndpoint
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPatternRangeEndpoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) Clone() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) Compare(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) CompareEndpoints(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& srcEndPoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& targetEndPoint) const;
        WINRT_IMPL_AUTO(void) ExpandToEnclosingUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& TextUnit) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) FindAttribute(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& attr, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& val, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& backward) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) FindText(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& text, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& backward, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& ignoreCase) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) GetAttributeValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& attr) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetBoundingRectangles() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) GetEnclosingElement() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetText(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& maxLength) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) Move(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& unit, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& count) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) MoveEndpointByUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& endpoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& unit, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& count) const;
        WINRT_IMPL_AUTO(void) MoveEndpointByRange(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& srcEndPoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& targetEndPoint) const;
        WINRT_IMPL_AUTO(void) Select() const;
        WINRT_IMPL_AUTO(void) AddToSelection() const;
        WINRT_IMPL_AUTO(void) RemoveFromSelection() const;
        WINRT_IMPL_AUTO(void) ScrollIntoView(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& alignToTop) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) GetChildren() const;
        WINRT_IMPL_AUTO(void) ShowContextMenu() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextUnit
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextUnit<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTogglePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) GetToggleState() const;
        WINRT_IMPL_AUTO(void) Toggle() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTogglePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteToggleState
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteToggleState<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanMove() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanResize() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanRotate() const;
        WINRT_IMPL_AUTO(void) Move(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& x, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& y) const;
        WINRT_IMPL_AUTO(void) Resize(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& width, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& height) const;
        WINRT_IMPL_AUTO(void) Rotate(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& degrees) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2 const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanZoom() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetZoomLevel() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetZoomMinimum() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) GetZoomMaximum() const;
        WINRT_IMPL_AUTO(void) Zoom(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& zoomValue) const;
        WINRT_IMPL_AUTO(void) ZoomByUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& ZoomUnit) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(void) Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(void) Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(void) Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(void) Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) Stringify() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) GetValue() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsReadOnly() const;
        WINRT_IMPL_AUTO(void) SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& val) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteVirtualizedItemPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern const& rhs) const;
        WINRT_IMPL_AUTO(void) Realize() const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteVirtualizedItemPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowInteractionState
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowInteractionState<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanMaximize() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetCanMinimize() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsModal() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) GetIsTopmost() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) GetWindowVisualState() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) GetWindowInteractionState() const;
        WINRT_IMPL_AUTO(void) Close() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) WaitForInputIdle(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& milliseconds) const;
        WINRT_IMPL_AUTO(void) SetWindowVisualState(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& state) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowVisualState
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowVisualState<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_UIAutomation_IAutomationRemoteZoomUnit
    {
        WINRT_IMPL_AUTO(void) Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const;
    };
    template <> struct consume<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit>
    {
        template <typename D> using type = consume_Microsoft_UI_UIAutomation_IAutomationRemoteZoomUnit<D>;
    };
    struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken
    {
        int32_t Value;
    };
    template <> struct abi<Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken>
    {
        using type = struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken;
    };
}
#endif
