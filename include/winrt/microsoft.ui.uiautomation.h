// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_UIAutomation_H
#define WINRT_Microsoft_UI_UIAutomation_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220110.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220110.5"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.UIAutomation.2.h"
#include "winrt/impl/Windows.UI.UIAutomation.Core.2.h"
#include "winrt/impl/Microsoft.UI.UIAutomation.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteActiveEnd<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteActiveEnd<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteActiveEnd<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnimationStyle<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnimationStyle<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnimationStyle<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::GetAnnotationTypeId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->GetAnnotationTypeId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::GetAnnotationTypeName() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->GetAnnotationTypeName(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::GetAuthor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->GetAuthor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::GetDateTime() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->GetDateTime(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationPattern<D>::GetTarget() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern)->GetTarget(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnnotationType<D>::LookupGuid() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType)->LookupGuid(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsNotSupported() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsNotSupported(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsMixedAttribute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsMixedAttribute(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsBool() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsBool(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsBool() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsBool(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsInt() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsInt(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsInt() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsInt(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsUint() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsUint(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsUint() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsUint(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsDouble() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsDouble(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsDouble() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsDouble(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsChar() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsChar(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsChar() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsChar(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsString() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsString(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsString() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsString(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsPoint() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsPoint(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsPoint() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsPoint(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsRect() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsRect(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsRect() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsRect(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsGuid() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsGuid(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsGuid() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsGuid(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsArray() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsArray(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsArray() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsArray(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsStringMap() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsStringMap(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsStringMap() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsStringMap(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsCacheRequest() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsCacheRequest(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsCacheRequest() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsCacheRequest(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsByteArray() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsByteArray(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsByteArray() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsByteArray(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsInvokePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsInvokePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsInvokePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsInvokePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSelectionPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSelectionPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSelectionPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSelectionPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsRangeValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsRangeValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsRangeValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsRangeValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsScrollPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsScrollPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsScrollPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsScrollPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsExpandCollapsePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsExpandCollapsePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsExpandCollapsePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsExpandCollapsePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsGridPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsGridPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsGridPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsGridPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsGridItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsGridItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsGridItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsGridItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsMultipleViewPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsMultipleViewPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsMultipleViewPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsMultipleViewPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsWindowPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsWindowPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsWindowPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsWindowPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSelectionItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSelectionItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSelectionItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSelectionItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsDockPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsDockPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsDockPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsDockPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTablePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTablePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTablePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTablePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTableItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTableItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTableItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTableItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTextPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTextPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTextRange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTextRange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextRange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextRange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsConnectionBoundObject() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsConnectionBoundObject(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTogglePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTogglePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTogglePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTogglePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTransformPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTransformPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTransformPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTransformPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsScrollItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsScrollItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsScrollItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsScrollItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsLegacyIAccessiblePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsLegacyIAccessiblePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsLegacyIAccessiblePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsLegacyIAccessiblePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsItemContainerPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsItemContainerPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsItemContainerPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsItemContainerPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsVirtualizedItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsVirtualizedItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsVirtualizedItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsVirtualizedItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSynchronizedInputPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSynchronizedInputPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSynchronizedInputPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSynchronizedInputPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsAnnotationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsAnnotationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsAnnotationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsAnnotationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTextPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTextPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsStylesPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsStylesPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsStylesPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsStylesPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSpreadsheetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSpreadsheetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSpreadsheetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSpreadsheetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSpreadsheetItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSpreadsheetItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSpreadsheetItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSpreadsheetItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTransformPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTransformPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTransformPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTransformPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTextChildPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTextChildPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextChildPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextChildPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsDragPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsDragPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsDragPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsDragPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsDropTargetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsDropTargetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsDropTargetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsDropTargetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsTextEditPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsTextEditPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextEditPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextEditPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsCustomNavigationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsCustomNavigationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsCustomNavigationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsCustomNavigationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::IsSelectionPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->IsSelectionPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSelectionPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSelectionPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsActiveEnd() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsActiveEnd(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsAnimationStyle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsAnimationStyle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsAnnotationType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsAnnotationType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsBulletStyle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsBulletStyle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsCapStyle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsCapStyle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsCaretBidiMode() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsCaretBidiMode(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsCaretPosition() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsCaretPosition(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsControlType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsControlType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsDockPosition() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsDockPosition(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsExpandCollapseState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsExpandCollapseState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsFlowDirections() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsFlowDirections(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsHeadingLevel() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsHeadingLevel(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsHorizontalTextAlignment() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsHorizontalTextAlignment(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsLandmarkType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsLandmarkType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsLiveSetting() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsLiveSetting(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsMetadata() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsMetadata(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsNavigateDirection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsNavigateDirection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsOrientationType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsOrientationType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsOutlineStyles() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsOutlineStyles(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsPatternId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsPatternId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsPropertyId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsPropertyId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsRowOrColumnMajor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsRowOrColumnMajor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSayAsInterpretAs() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSayAsInterpretAs(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsScrollAmount() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsScrollAmount(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsStyleId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsStyleId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSupportedTextSelection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSupportedTextSelection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsSynchronizedInputType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsSynchronizedInputType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextAttributeId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextAttributeId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextDecorationLineStyle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextDecorationLineStyle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextPatternRangeEndpoint() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextPatternRangeEndpoint(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsTextUnit() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsTextUnit(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsToggleState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsToggleState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsWindowInteractionState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsWindowInteractionState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsWindowVisualState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsWindowVisualState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit) consume_Microsoft_UI_UIAutomation_IAutomationRemoteAnyObject<D>::AsZoomUnit() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject)->AsZoomUnit(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::Append(winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& obj) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->Append(*(void**)(&obj)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::SetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& obj) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->SetAt(*(void**)(&index), *(void**)(&obj)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::RemoveAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->RemoveAt(*(void**)(&index), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::GetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->GetAt(*(void**)(&index), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::Size() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->Size(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteArray<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::BoolNot() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->BoolNot(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::BoolAnd(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->BoolAnd(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::BoolOr(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->BoolOr(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBool<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBulletStyle<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBulletStyle<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteBulletStyle<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteByteArray<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCacheRequest<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCacheRequest<D>::AddProperty(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest)->AddProperty(*(void**)(&propertyId)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCacheRequest<D>::AddPattern(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& patternId) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest)->AddPattern(*(void**)(&patternId)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCapStyle<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCapStyle<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCapStyle<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretBidiMode<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretBidiMode<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretBidiMode<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretPosition<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretPosition<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCaretPosition<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsLessThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsLessThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsGreaterThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->IsGreaterThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteChar<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteConnectionBoundObject<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteControlType<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteControlType<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteControlType<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCustomNavigationPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteCustomNavigationPattern<D>::Navigate(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& direction) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern)->Navigate(*(void**)(&direction), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPattern<D>::GetDockPosition() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern)->GetDockPosition(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPattern<D>::SetDockPosition(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& dockPos) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern)->SetDockPosition(*(void**)(&dockPos)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPosition<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPosition<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDockPosition<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsLessThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsLessThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsGreaterThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->IsGreaterThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Add(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Subtract(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Multiply(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Divide(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDouble<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>::GetIsGrabbed() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern)->GetIsGrabbed(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>::GetDropEffect() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern)->GetDropEffect(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>::GetDropEffects() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern)->GetDropEffects(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDragPattern<D>::GetGrabbedItems() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern)->GetGrabbedItems(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDropTargetPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDropTargetPattern<D>::GetDropTargetEffect() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern)->GetDropTargetEffect(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteDropTargetPattern<D>::GetDropTargetEffects() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern)->GetDropTargetEffects(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetPropertyValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetPropertyValue(*(void**)(&propertyId), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetPropertyValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& ignoreDefaultValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetPropertyValue2(*(void**)(&propertyId), *(void**)(&ignoreDefaultValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetMetadataValue(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& metadata) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetMetadataValue(*(void**)(&propertyId), *(void**)(&metadata), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetUpdatedCacheElement(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& cacheRequest) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetUpdatedCacheElement(*(void**)(&cacheRequest), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetParentElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetParentElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetFirstChildElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetFirstChildElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLastChildElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLastChildElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetNextSiblingElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetNextSiblingElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetPreviousSiblingElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetPreviousSiblingElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::PopulateCache(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const& cacheRequest) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->PopulateCache(*(void**)(&cacheRequest)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetRuntimeId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetRuntimeId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetProcessId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetProcessId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetControlType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetControlType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLocalizedControlType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLocalizedControlType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetName() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetName(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAcceleratorKey() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAcceleratorKey(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAccessKey() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAccessKey(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetHasKeyboardFocus() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetHasKeyboardFocus(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsKeyboardFocusable() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsKeyboardFocusable(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsEnabled() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsEnabled(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAutomationId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAutomationId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetClassName() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetClassName(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetHelpText() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetHelpText(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetCulture() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetCulture(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsControlElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsControlElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsContentElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsContentElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsPassword() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsPassword(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetNativeWindowHandle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetNativeWindowHandle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetItemType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetItemType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsOffscreen() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsOffscreen(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetOrientation() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetOrientation(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetFrameworkId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetFrameworkId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsRequiredForForm() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsRequiredForForm(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetItemStatus() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetItemStatus(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetBoundingRectangle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetBoundingRectangle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLabeledBy() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLabeledBy(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAriaRole() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAriaRole(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAriaProperties() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAriaProperties(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsDataValidForForm() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsDataValidForForm(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetControllerFor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetControllerFor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetDescribedBy() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetDescribedBy(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetFlowsTo() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetFlowsTo(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetProviderDescription() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetProviderDescription(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetOptimizeForVisualContent() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetOptimizeForVisualContent(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLiveSetting() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLiveSetting(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetFlowsFrom() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetFlowsFrom(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsPeripheral() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsPeripheral(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetPositionInSet() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetPositionInSet(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSizeOfSet() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSizeOfSet(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLevel() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLevel(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAnnotationTypes() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAnnotationTypes(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAnnotationObjects() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAnnotationObjects(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLandmarkType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLandmarkType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLocalizedLandmarkType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLocalizedLandmarkType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetFullDescription() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetFullDescription(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetHeadingLevel() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetHeadingLevel(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetIsDialog() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetIsDialog(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetInvokePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetInvokePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSelectionPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSelectionPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetRangeValuePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetRangeValuePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetScrollPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetScrollPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetExpandCollapsePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetExpandCollapsePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetGridPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetGridPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetGridItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetGridItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetMultipleViewPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetMultipleViewPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetWindowPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetWindowPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSelectionItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSelectionItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetDockPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetDockPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTablePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTablePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTableItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTableItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTextPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTextPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTogglePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTogglePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTransformPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTransformPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetScrollItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetScrollItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetLegacyIAccessiblePattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetLegacyIAccessiblePattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetItemContainerPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetItemContainerPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetVirtualizedItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetVirtualizedItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSynchronizedInputPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSynchronizedInputPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetAnnotationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetAnnotationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTextPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTextPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetStylesPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetStylesPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSpreadsheetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSpreadsheetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSpreadsheetItemPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSpreadsheetItemPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTransformPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTransformPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTextChildPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTextChildPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetDragPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetDragPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetDropTargetPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetDropTargetPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetTextEditPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetTextEditPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetCustomNavigationPattern() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetCustomNavigationPattern(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2) consume_Microsoft_UI_UIAutomation_IAutomationRemoteElement<D>::GetSelectionPattern2() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement)->GetSelectionPattern2(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern<D>::GetExpandCollapseState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern)->GetExpandCollapseState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern<D>::Expand() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern)->Expand());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapsePattern<D>::Collapse() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern)->Collapse());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapseState<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapseState<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExpandCollapseState<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTarget<D>::IsExtensionTarget() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget)->IsExtensionTarget(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTarget<D>::CallExtension(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& extensionId, array_view<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const> operands) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget)->CallExtension(*(void**)(&extensionId), operands.size(), get_abi(operands)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteExtensionTarget<D>::IsExtensionSupported(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& extensionId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget)->IsExtensionSupported(*(void**)(&extensionId), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteFlowDirections<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteFlowDirections<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteFlowDirections<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::GetContainingGrid() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->GetContainingGrid(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::GetRow() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->GetRow(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::GetColumn() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->GetColumn(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::GetRowSpan() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->GetRowSpan(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridItemPattern<D>::GetColumnSpan() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern)->GetColumnSpan(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern<D>::GetRowCount() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern)->GetRowCount(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern<D>::GetColumnCount() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern)->GetColumnCount(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGridPattern<D>::GetItem(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& row, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& column) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern)->GetItem(*(void**)(&row), *(void**)(&column), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>::LookupAnnotationType() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid)->LookupAnnotationType(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteGuid<D>::LookupPropertyId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid)->LookupPropertyId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHeadingLevel<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHeadingLevel<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHeadingLevel<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHorizontalTextAlignment<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHorizontalTextAlignment<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteHorizontalTextAlignment<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsLessThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsLessThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsGreaterThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->IsGreaterThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Add(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Subtract(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Multiply(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Divide(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInt<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInvokePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteInvokePattern<D>::Invoke() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern)->Invoke());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteItemContainerPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteItemContainerPattern<D>::FindItemByProperty(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& pStartAfter, winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& propertyId, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& value) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern)->FindItemByProperty(*(void**)(&pStartAfter), *(void**)(&propertyId), *(void**)(&value), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLandmarkType<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLandmarkType<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLandmarkType<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetChildId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetChildId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetName() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetName(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetValue() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetValue(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetDescription() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetDescription(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetRole() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetRole(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetHelp() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetHelp(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetKeyboardShortcut() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetKeyboardShortcut(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetSelection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetSelection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::GetDefaultAction() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->GetDefaultAction(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::Select(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& flagsSelect) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->Select(*(void**)(&flagsSelect)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::DoDefaultAction() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->DoDefaultAction());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLegacyIAccessiblePattern<D>::SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& szValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern)->SetValue(*(void**)(&szValue)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLiveSetting<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLiveSetting<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteLiveSetting<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMetadata<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMetadata<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMetadata<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>::GetCurrentView() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern)->GetCurrentView(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>::GetSupportedViews() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern)->GetSupportedViews(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>::GetViewName(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& view) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern)->GetViewName(*(void**)(&view), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteMultipleViewPattern<D>::SetCurrentView(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& view) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern)->SetCurrentView(*(void**)(&view)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteNavigateDirection<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteNavigateDirection<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteNavigateDirection<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteObject<D>::IsNull() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject)->IsNull(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationActiveEnd const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithActiveEnd(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationAnimationStyle const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithAnimationStyle(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationAnnotationType const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithAnnotationType(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationBulletStyle const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithBulletStyle(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCapStyle const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithCapStyle(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCaretBidiMode const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithCaretBidiMode(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationCaretPosition const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithCaretPosition(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationControlType const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithControlType(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationDockPosition const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithDockPosition(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationExpandCollapseState const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithExpandCollapseState(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationFlowDirections const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithFlowDirections(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationHeadingLevel const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithHeadingLevel(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationHorizontalTextAlignment const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithHorizontalTextAlignment(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationLandmarkType const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithLandmarkType(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationLiveSetting const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithLiveSetting(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationMetadata const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithMetadata(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationNavigateDirection const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithNavigateDirection(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationOrientationType const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithOrientationType(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationOutlineStyles const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithOutlineStyles(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationPatternId const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithPatternId(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationPropertyId const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithPropertyId(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationRowOrColumnMajor const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithRowOrColumnMajor(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSayAsInterpretAs const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithSayAsInterpretAs(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationScrollAmount const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithScrollAmount(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationStyleId const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithStyleId(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSupportedTextSelection const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithSupportedTextSelection(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationSynchronizedInputType const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithSynchronizedInputType(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextAttributeId const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithTextAttributeId(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextDecorationLineStyle const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithTextDecorationLineStyle(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextPatternRangeEndpoint const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithTextPatternRangeEndpoint(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationTextUnit const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithTextUnit(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationToggleState const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithToggleState(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationWindowInteractionState const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithWindowInteractionState(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationWindowVisualState const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithWindowVisualState(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEnum(winrt::Microsoft::UI::UIAutomation::AutomationZoomUnit const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEnumWithZoomUnit(static_cast<int32_t>(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewBool(bool initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewBool(initialValue, &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewInt(int32_t initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewInt(initialValue, &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewUint(uint32_t initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewUint(initialValue, &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewDouble(double initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewDouble(initialValue, &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewChar(char16_t initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewChar(initialValue, &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewString(param::hstring const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewString(*(void**)(&initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewPoint(winrt::Windows::Foundation::Point const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewPoint(impl::bind_in(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewRect(winrt::Windows::Foundation::Rect const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewRect(impl::bind_in(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::IsGuidSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->IsGuidSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewGuid(winrt::guid const& initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewGuid(impl::bind_in(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::IsCacheRequestSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->IsCacheRequestSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewCacheRequest() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewCacheRequest(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewArray() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewArray(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewStringMap() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewStringMap(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewNull() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewNull(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewEmpty() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewEmpty(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::NewByteArray(array_view<uint8_t const> initialValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->NewByteArray(initialValue.size(), get_abi(initialValue), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::IsOpcodeSupported(uint32_t opcode) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->IsOpcodeSupported(opcode, &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ImportElement(winrt::Windows::UI::UIAutomation::AutomationElement const& element) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ImportElement(*(void**)(&element), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ImportTextRange(winrt::Windows::UI::UIAutomation::AutomationTextRange const& textRange) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ImportTextRange(*(void**)(&textRange), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::RequestResponse(winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& object) const
    {
        winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->RequestResponse(*(void**)(&object), put_abi(result)));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::IfBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& trueHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->IfBlock(*(void**)(&condition), *(void**)(&trueHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::IfBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& trueHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& falseHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->IfBlock2(*(void**)(&condition), *(void**)(&trueHandler), *(void**)(&falseHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::WhileBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopBodyHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->WhileBlock(*(void**)(&condition), *(void**)(&loopBodyHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::WhileBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& condition, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopBodyHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& loopConditionUpdateHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->WhileBlock2(*(void**)(&condition), *(void**)(&loopBodyHandler), *(void**)(&loopConditionUpdateHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::BreakLoop() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->BreakLoop());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ContinueLoop() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ContinueLoop());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::TryBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& tryBlockHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->TryBlock(*(void**)(&tryBlockHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::TryBlock(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& tryBlockHandler, winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const& exceptBlockHandler) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->TryBlockWithExceptBlock(*(void**)(&tryBlockHandler), *(void**)(&exceptBlockHandler)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::GetCurrentFailureCode() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->GetCurrentFailureCode(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ReturnOperationStatus(winrt::hresult const& status) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ReturnOperationStatus(impl::bind_in(status)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ReturnOperationStatus(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& status) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ReturnOperationStatusWithRemoteInt(*(void**)(&status)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::Execute() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->Execute(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperation<D>::ImportConnectionBoundObject(winrt::Windows::UI::UIAutomation::AutomationConnectionBoundObject const& connectionBoundObject) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation)->ImportConnectionBoundObject(*(void**)(&connectionBoundObject), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::hresult) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>::OperationStatus() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet)->get_OperationStatus(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::UIAutomation::Core::AutomationRemoteOperationStatus) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>::Status() const
    {
        winrt::Windows::UI::UIAutomation::Core::AutomationRemoteOperationStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::hresult) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>::ExtendedError() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet)->get_ExtendedError(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>::HasResult(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const& token) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet)->HasResult(impl::bind_in(token), &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOperationResultSet<D>::GetResult(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const& token) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet)->GetResult(impl::bind_in(token), &result));
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOrientationType<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOrientationType<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOrientationType<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOutlineStyles<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOutlineStyles<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteOutlineStyles<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemotePatternId<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePatternId<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePatternId<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::GetX() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->GetX(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::GetY() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->GetY(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemotePoint<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid) consume_Microsoft_UI_UIAutomation_IAutomationRemotePropertyId<D>::LookupGuid() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId)->LookupGuid(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetValue() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetValue(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetIsReadOnly() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetIsReadOnly(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetMaximum() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetMaximum(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetMinimum() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetMinimum(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetLargeChange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetLargeChange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::GetSmallChange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->GetSmallChange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRangeValuePattern<D>::SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& val) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern)->SetValue(*(void**)(&val)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::GetHeight() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->GetHeight(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::GetWidth() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->GetWidth(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::GetX() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->GetX(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::GetY() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->GetY(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRect<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRowOrColumnMajor<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRowOrColumnMajor<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteRowOrColumnMajor<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSayAsInterpretAs<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSayAsInterpretAs<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSayAsInterpretAs<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollAmount<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollAmount<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollAmount<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollItemPattern<D>::ScrollIntoView() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern)->ScrollIntoView());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetHorizontalScrollPercent() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetHorizontalScrollPercent(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetVerticalScrollPercent() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetVerticalScrollPercent(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetHorizontalViewSize() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetHorizontalViewSize(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetVerticalViewSize() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetVerticalViewSize(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetHorizontallyScrollable() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetHorizontallyScrollable(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::GetVerticallyScrollable() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->GetVerticallyScrollable(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::Scroll(winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& horizontalAmount, winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const& verticalAmount) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->Scroll(*(void**)(&horizontalAmount), *(void**)(&verticalAmount)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteScrollPattern<D>::SetScrollPercent(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& horizontalPercent, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& verticalPercent) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern)->SetScrollPercent(*(void**)(&horizontalPercent), *(void**)(&verticalPercent)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::GetIsSelected() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->GetIsSelected(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::GetSelectionContainer() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->GetSelectionContainer(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::Select() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->Select());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::AddToSelection() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->AddToSelection());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionItemPattern<D>::RemoveFromSelection() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern)->RemoveFromSelection());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern<D>::GetSelection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern)->GetSelection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern<D>::GetCanSelectMultiple() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern)->GetCanSelectMultiple(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern<D>::GetIsSelectionRequired() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern)->GetIsSelectionRequired(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2 const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>::GetFirstSelectedItem() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2)->GetFirstSelectedItem(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>::GetLastSelectedItem() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2)->GetLastSelectedItem(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>::GetCurrentSelectedItem() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2)->GetCurrentSelectedItem(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSelectionPattern2<D>::GetItemCount() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2)->GetItemCount(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern<D>::GetFormula() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern)->GetFormula(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern<D>::GetAnnotationObjects() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern)->GetAnnotationObjects(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetItemPattern<D>::GetAnnotationTypes() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern)->GetAnnotationTypes(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSpreadsheetPattern<D>::GetItemByName(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& name) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern)->GetItemByName(*(void**)(&name), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::GetAt(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->GetAt(*(void**)(&index), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::Substr(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& index, winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& length) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->Substr(*(void**)(&index), *(void**)(&length), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::Concat(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& other) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->Concat(*(void**)(&other), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::Size() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->Size(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteString<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::Insert(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& val) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->Insert(*(void**)(&key), *(void**)(&val)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::Remove(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->Remove(*(void**)(&key), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::HasKey(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->HasKey(*(void**)(&key), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::Lookup(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& key) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->Lookup(*(void**)(&key), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStringMap<D>::Size() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap)->Size(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStyleId<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStyleId<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStyleId<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetStyleId() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetStyleId(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetStyleName() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetStyleName(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetFillColor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetFillColor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetFillPatternStyle() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetFillPatternStyle(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetShape() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetShape(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetFillPatternColor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetFillPatternColor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteStylesPattern<D>::GetExtendedProperties() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern)->GetExtendedProperties(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSupportedTextSelection<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSupportedTextSelection<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSupportedTextSelection<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputPattern<D>::StartListening(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& inputType) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern)->StartListening(*(void**)(&inputType)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputPattern<D>::Cancel() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern)->Cancel());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputType<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputType<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteSynchronizedInputType<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTableItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTableItemPattern<D>::GetRowHeaderItems() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern)->GetRowHeaderItems(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTableItemPattern<D>::GetColumnHeaderItems() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern)->GetColumnHeaderItems(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern<D>::GetRowHeaders() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern)->GetRowHeaders(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern<D>::GetColumnHeaders() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern)->GetColumnHeaders(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTablePattern<D>::GetRowOrColumnMajor() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern)->GetRowOrColumnMajor(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextAttributeId<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextAttributeId<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextAttributeId<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextChildPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextChildPattern<D>::GetTextContainer() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern)->GetTextContainer(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextChildPattern<D>::GetTextRange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern)->GetTextRange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextDecorationLineStyle<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextDecorationLineStyle<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextDecorationLineStyle<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextEditPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextEditPattern<D>::GetActiveComposition() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern)->GetActiveComposition(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextEditPattern<D>::GetConversionTarget() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern)->GetConversionTarget(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::RangeFromPoint(winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const& pt) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->RangeFromPoint(*(void**)(&pt), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::RangeFromChild(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& child) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->RangeFromChild(*(void**)(&child), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::GetSelection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->GetSelection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::GetVisibleRanges() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->GetVisibleRanges(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::GetDocumentRange() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->GetDocumentRange(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern<D>::GetSupportedTextSelection() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern)->GetSupportedTextSelection(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern2<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2 const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern2<D>::RangeFromAnnotation(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const& annotation) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2)->RangeFromAnnotation(*(void**)(&annotation), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPattern2<D>::GetCaretRange(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool& isActive) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2)->GetCaretRange(impl::bind_out(isActive), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPatternRangeEndpoint<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPatternRangeEndpoint<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextPatternRangeEndpoint<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::Clone() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->Clone(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::Compare(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->Compare(*(void**)(&range), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::CompareEndpoints(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& srcEndPoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& targetEndPoint) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->CompareEndpoints(*(void**)(&srcEndPoint), *(void**)(&range), *(void**)(&targetEndPoint), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::ExpandToEnclosingUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& TextUnit) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->ExpandToEnclosingUnit(*(void**)(&TextUnit)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::FindAttribute(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& attr, winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const& val, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& backward) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->FindAttribute(*(void**)(&attr), *(void**)(&val), *(void**)(&backward), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::FindText(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& text, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& backward, winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& ignoreCase) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->FindText(*(void**)(&text), *(void**)(&backward), *(void**)(&ignoreCase), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::GetAttributeValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const& attr) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->GetAttributeValue(*(void**)(&attr), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::GetBoundingRectangles() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->GetBoundingRectangles(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::GetEnclosingElement() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->GetEnclosingElement(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::GetText(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& maxLength) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->GetText(*(void**)(&maxLength), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::Move(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& unit, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& count) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->Move(*(void**)(&unit), *(void**)(&count), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::MoveEndpointByUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& endpoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& unit, winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& count) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->MoveEndpointByUnit(*(void**)(&endpoint), *(void**)(&unit), *(void**)(&count), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::MoveEndpointByRange(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& srcEndPoint, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const& range, winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const& targetEndPoint) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->MoveEndpointByRange(*(void**)(&srcEndPoint), *(void**)(&range), *(void**)(&targetEndPoint)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::Select() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->Select());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::AddToSelection() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->AddToSelection());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::RemoveFromSelection() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->RemoveFromSelection());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::ScrollIntoView(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const& alignToTop) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->ScrollIntoView(*(void**)(&alignToTop)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::GetChildren() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->GetChildren(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextRange<D>::ShowContextMenu() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange)->ShowContextMenu());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextUnit<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextUnit<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTextUnit<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTogglePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTogglePattern<D>::GetToggleState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern)->GetToggleState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTogglePattern<D>::Toggle() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern)->Toggle());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteToggleState<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteToggleState<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteToggleState<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::GetCanMove() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->GetCanMove(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::GetCanResize() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->GetCanResize(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::GetCanRotate() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->GetCanRotate(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::Move(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& x, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& y) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->Move(*(void**)(&x), *(void**)(&y)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::Resize(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& width, winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& height) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->Resize(*(void**)(&width), *(void**)(&height)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern<D>::Rotate(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& degrees) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern)->Rotate(*(void**)(&degrees)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2 const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::GetCanZoom() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->GetCanZoom(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::GetZoomLevel() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->GetZoomLevel(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::GetZoomMinimum() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->GetZoomMinimum(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::GetZoomMaximum() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->GetZoomMaximum(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::Zoom(winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const& zoomValue) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->Zoom(*(void**)(&zoomValue)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteTransformPattern2<D>::ZoomByUnit(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& ZoomUnit) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2)->ZoomByUnit(*(void**)(&ZoomUnit)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsLessThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsLessThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsLessThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsLessThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsGreaterThan(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsGreaterThan(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::IsGreaterThanOrEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->IsGreaterThanOrEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Add(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Add(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Subtract(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Subtract(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Multiply(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Multiply(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Divide(winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Divide(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteUint<D>::Stringify() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint)->Stringify(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString) consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern<D>::GetValue() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern)->GetValue(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteString{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern<D>::GetIsReadOnly() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern)->GetIsReadOnly(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteValuePattern<D>::SetValue(winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const& val) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern)->SetValue(*(void**)(&val)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteVirtualizedItemPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteVirtualizedItemPattern<D>::Realize() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern)->Realize());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowInteractionState<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowInteractionState<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowInteractionState<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetCanMaximize() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetCanMaximize(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetCanMinimize() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetCanMinimize(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetIsModal() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetIsModal(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetIsTopmost() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetIsTopmost(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetWindowVisualState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetWindowVisualState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::GetWindowInteractionState() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->GetWindowInteractionState(&result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::Close() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->Close());
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::WaitForInputIdle(winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const& milliseconds) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->WaitForInputIdle(*(void**)(&milliseconds), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowPattern<D>::SetWindowVisualState(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& state) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern)->SetWindowVisualState(*(void**)(&state)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowVisualState<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowVisualState<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteWindowVisualState<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_UIAutomation_IAutomationRemoteZoomUnit<D>::Set(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit)->Set(*(void**)(&rhs)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteZoomUnit<D>::IsEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit)->IsEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool) consume_Microsoft_UI_UIAutomation_IAutomationRemoteZoomUnit<D>::IsNotEqual(winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const& rhs) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit)->IsNotEqual(*(void**)(&rhs), &result));
        return winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool{ result, take_ownership_from_abi };
    }
    template <typename H> struct delegate<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler, H> final : implements_delegate<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler, H>
    {
        delegate(H&& handler) : implements_delegate<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler, H>(std::forward<H>(handler)) {}

        int32_t __stdcall Invoke() noexcept final try
        {
            (*this)();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationTypeId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>(this->shim().GetAnnotationTypeId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationTypeName(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAnnotationTypeName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAuthor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAuthor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDateTime(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetDateTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTarget(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LookupGuid(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>(this->shim().LookupGuid());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject>
    {
        int32_t __stdcall IsNotSupported(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsMixedAttribute(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsMixedAttribute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsBool(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsBool());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsBool(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().AsBool());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsInt(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsInt());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsInt(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().AsInt());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsUint(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsUint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsUint(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().AsUint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsDouble(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsDouble());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsDouble(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().AsDouble());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsChar(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsChar());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsChar(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar>(this->shim().AsChar());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsString(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsString());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsString(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().AsString());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsPoint(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsPoint(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint>(this->shim().AsPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsRect(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsRect(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect>(this->shim().AsRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGuid(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGuid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsGuid(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>(this->shim().AsGuid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsArray(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsArray());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsArray(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().AsArray());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsStringMap(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsStringMap());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsStringMap(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap>(this->shim().AsStringMap());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().AsElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsCacheRequest(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsCacheRequest());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsCacheRequest(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest>(this->shim().AsCacheRequest());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsByteArray(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsByteArray());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsByteArray(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray>(this->shim().AsByteArray());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsInvokePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsInvokePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsInvokePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern>(this->shim().AsInvokePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSelectionPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSelectionPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSelectionPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern>(this->shim().AsSelectionPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern>(this->shim().AsValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsRangeValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsRangeValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsRangeValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern>(this->shim().AsRangeValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsScrollPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsScrollPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsScrollPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern>(this->shim().AsScrollPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsExpandCollapsePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsExpandCollapsePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsExpandCollapsePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern>(this->shim().AsExpandCollapsePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGridPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGridPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsGridPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern>(this->shim().AsGridPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGridItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGridItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsGridItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern>(this->shim().AsGridItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsMultipleViewPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsMultipleViewPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsMultipleViewPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern>(this->shim().AsMultipleViewPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsWindowPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsWindowPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsWindowPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern>(this->shim().AsWindowPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSelectionItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSelectionItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSelectionItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern>(this->shim().AsSelectionItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsDockPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsDockPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsDockPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern>(this->shim().AsDockPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTablePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTablePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTablePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern>(this->shim().AsTablePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTableItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTableItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTableItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern>(this->shim().AsTableItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTextPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTextPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern>(this->shim().AsTextPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTextRange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTextRange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextRange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().AsTextRange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsConnectionBoundObject(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject>(this->shim().AsConnectionBoundObject());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTogglePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTogglePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTogglePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern>(this->shim().AsTogglePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTransformPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTransformPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTransformPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern>(this->shim().AsTransformPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsScrollItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsScrollItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsScrollItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern>(this->shim().AsScrollItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLegacyIAccessiblePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLegacyIAccessiblePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsLegacyIAccessiblePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern>(this->shim().AsLegacyIAccessiblePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsItemContainerPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsItemContainerPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsItemContainerPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern>(this->shim().AsItemContainerPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsVirtualizedItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsVirtualizedItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsVirtualizedItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern>(this->shim().AsVirtualizedItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSynchronizedInputPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSynchronizedInputPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSynchronizedInputPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern>(this->shim().AsSynchronizedInputPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsAnnotationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsAnnotationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsAnnotationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern>(this->shim().AsAnnotationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTextPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTextPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2>(this->shim().AsTextPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsStylesPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsStylesPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsStylesPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern>(this->shim().AsStylesPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSpreadsheetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSpreadsheetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSpreadsheetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern>(this->shim().AsSpreadsheetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSpreadsheetItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSpreadsheetItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSpreadsheetItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern>(this->shim().AsSpreadsheetItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTransformPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTransformPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTransformPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2>(this->shim().AsTransformPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTextChildPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTextChildPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextChildPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern>(this->shim().AsTextChildPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsDragPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsDragPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsDragPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern>(this->shim().AsDragPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsDropTargetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsDropTargetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsDropTargetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern>(this->shim().AsDropTargetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsTextEditPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsTextEditPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextEditPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern>(this->shim().AsTextEditPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsCustomNavigationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsCustomNavigationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsCustomNavigationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern>(this->shim().AsCustomNavigationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSelectionPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsSelectionPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSelectionPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2>(this->shim().AsSelectionPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsActiveEnd(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd>(this->shim().AsActiveEnd());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsAnimationStyle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle>(this->shim().AsAnimationStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsAnnotationType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>(this->shim().AsAnnotationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsBulletStyle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle>(this->shim().AsBulletStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsCapStyle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle>(this->shim().AsCapStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsCaretBidiMode(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode>(this->shim().AsCaretBidiMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsCaretPosition(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition>(this->shim().AsCaretPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsControlType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType>(this->shim().AsControlType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsDockPosition(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition>(this->shim().AsDockPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsExpandCollapseState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState>(this->shim().AsExpandCollapseState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsFlowDirections(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections>(this->shim().AsFlowDirections());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsHeadingLevel(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel>(this->shim().AsHeadingLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsHorizontalTextAlignment(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment>(this->shim().AsHorizontalTextAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsLandmarkType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType>(this->shim().AsLandmarkType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsLiveSetting(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting>(this->shim().AsLiveSetting());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsMetadata(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata>(this->shim().AsMetadata());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsNavigateDirection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection>(this->shim().AsNavigateDirection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsOrientationType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType>(this->shim().AsOrientationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsOutlineStyles(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles>(this->shim().AsOutlineStyles());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsPatternId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId>(this->shim().AsPatternId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsPropertyId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId>(this->shim().AsPropertyId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsRowOrColumnMajor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor>(this->shim().AsRowOrColumnMajor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSayAsInterpretAs(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs>(this->shim().AsSayAsInterpretAs());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsScrollAmount(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount>(this->shim().AsScrollAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsStyleId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId>(this->shim().AsStyleId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSupportedTextSelection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection>(this->shim().AsSupportedTextSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsSynchronizedInputType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType>(this->shim().AsSynchronizedInputType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextAttributeId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId>(this->shim().AsTextAttributeId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextDecorationLineStyle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle>(this->shim().AsTextDecorationLineStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextPatternRangeEndpoint(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint>(this->shim().AsTextPatternRangeEndpoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsTextUnit(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit>(this->shim().AsTextUnit());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsToggleState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState>(this->shim().AsToggleState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsWindowInteractionState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState>(this->shim().AsWindowInteractionState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsWindowVisualState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState>(this->shim().AsWindowVisualState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AsZoomUnit(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit>(this->shim().AsZoomUnit());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Append(void* obj) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Append(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&obj));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetAt(void* index, void* obj) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAt(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&index), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&obj));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveAt(void* index, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().RemoveAt(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&index)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAt(void* index, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().GetAt(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&index)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Size(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BoolNot(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().BoolNot());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BoolAnd(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().BoolAnd(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BoolOr(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().BoolOr(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddProperty(void* propertyId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddProperty(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&propertyId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddPattern(void* patternId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddPattern(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const*>(&patternId));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Navigate(void* direction, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().Navigate(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const*>(&direction)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDockPosition(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition>(this->shim().GetDockPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDockPosition(void* dockPos) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDockPosition(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const*>(&dockPos));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Add(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Add(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Subtract(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Subtract(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Multiply(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Multiply(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Divide(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Divide(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsGrabbed(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsGrabbed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDropEffect(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetDropEffect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDropEffects(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetDropEffects());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetGrabbedItems(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetGrabbedItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDropTargetEffect(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetDropTargetEffect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDropTargetEffects(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetDropTargetEffects());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPropertyValue(void* propertyId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().GetPropertyValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&propertyId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPropertyValue2(void* propertyId, void* ignoreDefaultValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().GetPropertyValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&propertyId), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&ignoreDefaultValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMetadataValue(void* propertyId, void* metadata, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().GetMetadataValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&propertyId), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const*>(&metadata)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetUpdatedCacheElement(void* cacheRequest, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetUpdatedCacheElement(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const*>(&cacheRequest)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetParentElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetParentElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFirstChildElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetFirstChildElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLastChildElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetLastChildElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetNextSiblingElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetNextSiblingElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPreviousSiblingElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetPreviousSiblingElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PopulateCache(void* cacheRequest) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PopulateCache(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest const*>(&cacheRequest));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRuntimeId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetRuntimeId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetProcessId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetProcessId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetControlType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType>(this->shim().GetControlType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLocalizedControlType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetLocalizedControlType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetName(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAcceleratorKey(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAcceleratorKey());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAccessKey(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAccessKey());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHasKeyboardFocus(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetHasKeyboardFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsKeyboardFocusable(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsKeyboardFocusable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsEnabled(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAutomationId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAutomationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetClassName(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetClassName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHelpText(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetHelpText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCulture(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetCulture());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsControlElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsControlElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsContentElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsContentElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsPassword(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsPassword());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetNativeWindowHandle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetNativeWindowHandle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItemType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetItemType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsOffscreen(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsOffscreen());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetOrientation(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType>(this->shim().GetOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFrameworkId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetFrameworkId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsRequiredForForm(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsRequiredForForm());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItemStatus(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetItemStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetBoundingRectangle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect>(this->shim().GetBoundingRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLabeledBy(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetLabeledBy());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAriaRole(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAriaRole());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAriaProperties(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetAriaProperties());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsDataValidForForm(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsDataValidForForm());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetControllerFor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetControllerFor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDescribedBy(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetDescribedBy());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFlowsTo(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetFlowsTo());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetProviderDescription(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetProviderDescription());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetOptimizeForVisualContent(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetOptimizeForVisualContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLiveSetting(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting>(this->shim().GetLiveSetting());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFlowsFrom(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetFlowsFrom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsPeripheral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsPeripheral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPositionInSet(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetPositionInSet());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSizeOfSet(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetSizeOfSet());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLevel(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationTypes(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetAnnotationTypes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationObjects(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetAnnotationObjects());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLandmarkType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType>(this->shim().GetLandmarkType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLocalizedLandmarkType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetLocalizedLandmarkType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFullDescription(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetFullDescription());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHeadingLevel(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel>(this->shim().GetHeadingLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsDialog(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsDialog());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInvokePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern>(this->shim().GetInvokePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelectionPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern>(this->shim().GetSelectionPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern>(this->shim().GetValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRangeValuePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern>(this->shim().GetRangeValuePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetScrollPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern>(this->shim().GetScrollPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetExpandCollapsePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern>(this->shim().GetExpandCollapsePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetGridPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern>(this->shim().GetGridPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetGridItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern>(this->shim().GetGridItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMultipleViewPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern>(this->shim().GetMultipleViewPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWindowPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern>(this->shim().GetWindowPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelectionItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern>(this->shim().GetSelectionItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDockPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern>(this->shim().GetDockPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTablePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern>(this->shim().GetTablePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTableItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern>(this->shim().GetTableItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern>(this->shim().GetTextPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTogglePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern>(this->shim().GetTogglePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTransformPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern>(this->shim().GetTransformPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetScrollItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern>(this->shim().GetScrollItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLegacyIAccessiblePattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern>(this->shim().GetLegacyIAccessiblePattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItemContainerPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern>(this->shim().GetItemContainerPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVirtualizedItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern>(this->shim().GetVirtualizedItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSynchronizedInputPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern>(this->shim().GetSynchronizedInputPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern>(this->shim().GetAnnotationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2>(this->shim().GetTextPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStylesPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern>(this->shim().GetStylesPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSpreadsheetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern>(this->shim().GetSpreadsheetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSpreadsheetItemPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern>(this->shim().GetSpreadsheetItemPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTransformPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2>(this->shim().GetTransformPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextChildPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern>(this->shim().GetTextChildPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDragPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern>(this->shim().GetDragPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDropTargetPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern>(this->shim().GetDropTargetPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextEditPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern>(this->shim().GetTextEditPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCustomNavigationPattern(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern>(this->shim().GetCustomNavigationPattern());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelectionPattern2(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2>(this->shim().GetSelectionPattern2());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetExpandCollapseState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState>(this->shim().GetExpandCollapseState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Expand() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Expand();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Collapse() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Collapse();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget>
    {
        int32_t __stdcall IsExtensionTarget(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsExtensionTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CallExtension(void* extensionId, uint32_t __operandsSize, void** operands) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CallExtension(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const*>(&extensionId), array_view<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const>(reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const *>(operands), reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const *>(operands) + __operandsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsExtensionSupported(void* extensionId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsExtensionSupported(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const*>(&extensionId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory>
    {
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetContainingGrid(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetContainingGrid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRow(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetRow());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColumn(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetColumn());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRowSpan(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetRowSpan());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColumnSpan(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetColumnSpan());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRowCount(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetRowCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColumnCount(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetColumnCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItem(void* row, void* column, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetItem(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&row), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&column)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LookupAnnotationType(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>(this->shim().LookupAnnotationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LookupPropertyId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId>(this->shim().LookupPropertyId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Add(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Add(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Subtract(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Subtract(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Multiply(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Multiply(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Divide(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Divide(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Invoke() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Invoke();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindItemByProperty(void* pStartAfter, void* propertyId, void* value, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().FindItemByProperty(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const*>(&pStartAfter), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&propertyId), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetChildId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetChildId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetName(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetValue(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDescription(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetDescription());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRole(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().GetRole());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().GetState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHelp(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetHelp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetKeyboardShortcut(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetKeyboardShortcut());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDefaultAction(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetDefaultAction());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Select(void* flagsSelect) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&flagsSelect));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DoDefaultAction() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DoDefaultAction();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetValue(void* szValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&szValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentView(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetCurrentView());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSupportedViews(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetSupportedViews());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetViewName(void* view, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetViewName(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&view)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetCurrentView(void* view) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetCurrentView(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&view));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject>
    {
        int32_t __stdcall IsNull(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNull());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory>
    {
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation>
    {
        int32_t __stdcall NewEnumWithActiveEnd(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationActiveEnd const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithAnimationStyle(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationAnimationStyle const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithAnnotationType(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationAnnotationType const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithBulletStyle(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationBulletStyle const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithCapStyle(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationCapStyle const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithCaretBidiMode(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationCaretBidiMode const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithCaretPosition(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationCaretPosition const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithControlType(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationControlType const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithDockPosition(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationDockPosition const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithExpandCollapseState(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationExpandCollapseState const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithFlowDirections(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationFlowDirections const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithHeadingLevel(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationHeadingLevel const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithHorizontalTextAlignment(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationHorizontalTextAlignment const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithLandmarkType(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationLandmarkType const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithLiveSetting(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationLiveSetting const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithMetadata(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationMetadata const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithNavigateDirection(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationNavigateDirection const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithOrientationType(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationOrientationType const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithOutlineStyles(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationOutlineStyles const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithPatternId(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationPatternId const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithPropertyId(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationPropertyId const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithRowOrColumnMajor(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRowOrColumnMajor const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithSayAsInterpretAs(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationSayAsInterpretAs const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithScrollAmount(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationScrollAmount const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithStyleId(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationStyleId const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithSupportedTextSelection(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationSupportedTextSelection const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithSynchronizedInputType(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationSynchronizedInputType const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithTextAttributeId(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationTextAttributeId const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithTextDecorationLineStyle(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationTextDecorationLineStyle const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithTextPatternRangeEndpoint(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationTextPatternRangeEndpoint const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithTextUnit(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationTextUnit const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithToggleState(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationToggleState const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithWindowInteractionState(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationWindowInteractionState const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithWindowVisualState(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationWindowVisualState const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEnumWithZoomUnit(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit>(this->shim().NewEnum(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationZoomUnit const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewBool(bool initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().NewBool(initialValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewInt(int32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().NewInt(initialValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewUint(uint32_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().NewUint(initialValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewDouble(double initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().NewDouble(initialValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewChar(char16_t initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar>(this->shim().NewChar(initialValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewString(void* initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().NewString(*reinterpret_cast<hstring const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewPoint(winrt::Windows::Foundation::Point initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint>(this->shim().NewPoint(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewRect(winrt::Windows::Foundation::Rect initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect>(this->shim().NewRect(*reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGuidSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsGuidSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewGuid(winrt::guid initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>(this->shim().NewGuid(*reinterpret_cast<winrt::guid const*>(&initialValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsCacheRequestSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsCacheRequestSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewCacheRequest(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest>(this->shim().NewCacheRequest());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewArray(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().NewArray());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewStringMap(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap>(this->shim().NewStringMap());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewNull(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().NewNull());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewEmpty(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().NewEmpty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NewByteArray(uint32_t __initialValueSize, uint8_t* initialValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray>(this->shim().NewByteArray(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(initialValue), reinterpret_cast<uint8_t const *>(initialValue) + __initialValueSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsOpcodeSupported(uint32_t opcode, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsOpcodeSupported(opcode));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ImportElement(void* element, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().ImportElement(*reinterpret_cast<winrt::Windows::UI::UIAutomation::AutomationElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ImportTextRange(void* textRange, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().ImportTextRange(*reinterpret_cast<winrt::Windows::UI::UIAutomation::AutomationTextRange const*>(&textRange)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RequestResponse(void* object, struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken* result) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken>(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken>(this->shim().RequestResponse(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&object)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IfBlock(void* condition, void* trueHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IfBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&condition), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&trueHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IfBlock2(void* condition, void* trueHandler, void* falseHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IfBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&condition), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&trueHandler), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&falseHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall WhileBlock(void* condition, void* loopBodyHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WhileBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&condition), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&loopBodyHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall WhileBlock2(void* condition, void* loopBodyHandler, void* loopConditionUpdateHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WhileBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&condition), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&loopBodyHandler), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&loopConditionUpdateHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall BreakLoop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BreakLoop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ContinueLoop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContinueLoop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryBlock(void* tryBlockHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TryBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&tryBlockHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryBlockWithExceptBlock(void* tryBlockHandler, void* exceptBlockHandler) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TryBlock(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&tryBlockHandler), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationScopeHandler const*>(&exceptBlockHandler));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentFailureCode(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetCurrentFailureCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReturnOperationStatus(winrt::hresult status) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReturnOperationStatus(*reinterpret_cast<winrt::hresult const*>(&status));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ReturnOperationStatusWithRemoteInt(void* status) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ReturnOperationStatus(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&status));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Execute(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet>(this->shim().Execute());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ImportConnectionBoundObject(void* connectionBoundObject, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject>(this->shim().ImportConnectionBoundObject(*reinterpret_cast<winrt::Windows::UI::UIAutomation::AutomationConnectionBoundObject const*>(&connectionBoundObject)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet>
    {
        int32_t __stdcall get_OperationStatus(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().OperationStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::UIAutomation::Core::AutomationRemoteOperationStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall HasResult(struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken token, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().HasResult(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const*>(&token)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetResult(struct struct_Microsoft_UI_UIAutomation_AutomationRemoteOperationResponseToken token, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().GetResult(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResponseToken const*>(&token)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetX(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetX());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetY(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetY());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LookupGuid(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid>(this->shim().LookupGuid());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetValue(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsReadOnly(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsReadOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMaximum(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetMaximum());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetMinimum(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetMinimum());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLargeChange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetLargeChange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSmallChange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetSmallChange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetValue(void* val) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&val));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHeight(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWidth(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetX(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetX());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetY(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetY());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ScrollIntoView() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollIntoView();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHorizontalScrollPercent(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetHorizontalScrollPercent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVerticalScrollPercent(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetVerticalScrollPercent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHorizontalViewSize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetHorizontalViewSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVerticalViewSize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetVerticalViewSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHorizontallyScrollable(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetHorizontallyScrollable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVerticallyScrollable(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetVerticallyScrollable());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Scroll(void* horizontalAmount, void* verticalAmount) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Scroll(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const*>(&horizontalAmount), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount const*>(&verticalAmount));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetScrollPercent(void* horizontalPercent, void* verticalPercent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetScrollPercent(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&horizontalPercent), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&verticalPercent));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsSelected(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsSelected());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelectionContainer(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetSelectionContainer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Select() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddToSelection() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddToSelection();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveFromSelection() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFromSelection();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanSelectMultiple(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanSelectMultiple());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsSelectionRequired(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsSelectionRequired());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2 const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFirstSelectedItem(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetFirstSelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLastSelectedItem(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetLastSelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentSelectedItem(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetCurrentSelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItemCount(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetItemCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFormula(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetFormula());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationObjects(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetAnnotationObjects());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAnnotationTypes(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetAnnotationTypes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetItemByName(void* name, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetItemByName(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&name)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAt(void* index, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar>(this->shim().GetAt(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&index)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Substr(void* index, void* length, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Substr(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&index), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&length)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Concat(void* other, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Concat(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&other)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Size(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Insert(void* key, void* val) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Insert(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&key), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&val));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Remove(void* key, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().Remove(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall HasKey(void* key, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().HasKey(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Lookup(void* key, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().Lookup(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Size(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStyleId(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId>(this->shim().GetStyleId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStyleName(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetStyleName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFillColor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetFillColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFillPatternStyle(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetFillPatternStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetShape(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetShape());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetFillPatternColor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().GetFillPatternColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetExtendedProperties(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetExtendedProperties());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall StartListening(void* inputType) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartListening(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const*>(&inputType));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Cancel() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRowHeaderItems(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetRowHeaderItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColumnHeaderItems(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetColumnHeaderItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRowHeaders(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetRowHeaders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetColumnHeaders(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetColumnHeaders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRowOrColumnMajor(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor>(this->shim().GetRowOrColumnMajor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextContainer(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetTextContainer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetTextRange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().GetTextRange());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetActiveComposition(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().GetActiveComposition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetConversionTarget(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().GetConversionTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RangeFromPoint(void* pt, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().RangeFromPoint(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint const*>(&pt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RangeFromChild(void* child, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().RangeFromChild(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const*>(&child)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSelection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVisibleRanges(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetVisibleRanges());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDocumentRange(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().GetDocumentRange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSupportedTextSelection(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection>(this->shim().GetSupportedTextSelection());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2 const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RangeFromAnnotation(void* annotation, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().RangeFromAnnotation(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement const*>(&annotation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCaretRange(void** isActive, void** result) noexcept final try
        {
            clear_abi(isActive);
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().GetCaretRange(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool*>(isActive)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Clone(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().Clone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Compare(void* range, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().Compare(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const*>(&range)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CompareEndpoints(void* srcEndPoint, void* range, void* targetEndPoint, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().CompareEndpoints(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&srcEndPoint), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const*>(&range), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&targetEndPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ExpandToEnclosingUnit(void* TextUnit) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ExpandToEnclosingUnit(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&TextUnit));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindAttribute(void* attr, void* val, void* backward, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().FindAttribute(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const*>(&attr), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject const*>(&val), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&backward)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindText(void* text, void* backward, void* ignoreCase, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange>(this->shim().FindText(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&text), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&backward), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&ignoreCase)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAttributeValue(void* attr, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject>(this->shim().GetAttributeValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId const*>(&attr)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetBoundingRectangles(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetBoundingRectangles());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetEnclosingElement(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement>(this->shim().GetEnclosingElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetText(void* maxLength, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetText(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&maxLength)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Move(void* unit, void* count, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().Move(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&unit), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&count)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall MoveEndpointByUnit(void* endpoint, void* unit, void* count, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt>(this->shim().MoveEndpointByUnit(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&endpoint), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&unit), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&count)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall MoveEndpointByRange(void* srcEndPoint, void* range, void* targetEndPoint) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MoveEndpointByRange(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&srcEndPoint), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange const*>(&range), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint const*>(&targetEndPoint));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Select() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Select();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddToSelection() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddToSelection();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveFromSelection() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveFromSelection();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ScrollIntoView(void* alignToTop) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ScrollIntoView(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool const*>(&alignToTop));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetChildren(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray>(this->shim().GetChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ShowContextMenu() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowContextMenu();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetToggleState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState>(this->shim().GetToggleState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Toggle() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Toggle();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanMove(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanMove());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanResize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanResize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanRotate(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanRotate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Move(void* x, void* y) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Move(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&x), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&y));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Resize(void* width, void* height) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Resize(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&width), *reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&height));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Rotate(void* degrees) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Rotate(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&degrees));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2 const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanZoom(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanZoom());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetZoomLevel(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetZoomLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetZoomMinimum(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetZoomMinimum());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetZoomMaximum(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble>(this->shim().GetZoomMaximum());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Zoom(void* zoomValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Zoom(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble const*>(&zoomValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ZoomByUnit(void* ZoomUnit) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ZoomByUnit(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const*>(&ZoomUnit));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsLessThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsLessThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThan(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThan(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsGreaterThanOrEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsGreaterThanOrEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Add(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Add(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Subtract(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Subtract(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Multiply(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Multiply(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Divide(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Divide(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Stringify(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetValue(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString>(this->shim().GetValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsReadOnly(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsReadOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetValue(void* val) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetValue(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString const*>(&val));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Realize() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Realize();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanMaximize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanMaximize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCanMinimize(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetCanMinimize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsModal(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsModal());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIsTopmost(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().GetIsTopmost());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWindowVisualState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState>(this->shim().GetWindowVisualState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWindowInteractionState(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState>(this->shim().GetWindowInteractionState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Close() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Close();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall WaitForInputIdle(void* milliseconds, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().WaitForInputIdle(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt const*>(&milliseconds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetWindowVisualState(void* state) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetWindowVisualState(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const*>(&state));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit> : produce_base<D, winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit>
    {
        int32_t __stdcall Set(void* rhs) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Set(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const*>(&rhs));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsNotEqual(void* rhs, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool>(this->shim().IsNotEqual(*reinterpret_cast<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit const*>(&rhs)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::UI::UIAutomation
{
    template <typename L> AutomationRemoteOperationScopeHandler::AutomationRemoteOperationScopeHandler(L handler) :
        AutomationRemoteOperationScopeHandler(impl::make_delegate<AutomationRemoteOperationScopeHandler>(std::forward<L>(handler)))
    {
    }
    template <typename F> AutomationRemoteOperationScopeHandler::AutomationRemoteOperationScopeHandler(F* handler) :
        AutomationRemoteOperationScopeHandler([=](auto&&... args) { return handler(args...); })
    {
    }
    template <typename O, typename M> AutomationRemoteOperationScopeHandler::AutomationRemoteOperationScopeHandler(O* object, M method) :
        AutomationRemoteOperationScopeHandler([=](auto&&... args) { return ((*object).*(method))(args...); })
    {
    }
    template <typename O, typename M> AutomationRemoteOperationScopeHandler::AutomationRemoteOperationScopeHandler(com_ptr<O>&& object, M method) :
        AutomationRemoteOperationScopeHandler([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
    {
    }
    template <typename O, typename M> AutomationRemoteOperationScopeHandler::AutomationRemoteOperationScopeHandler(weak_ref<O>&& object, M method) :
        AutomationRemoteOperationScopeHandler([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
    {
    }
    inline auto AutomationRemoteOperationScopeHandler::operator()() const
    {
        check_hresult((*(impl::abi_t<AutomationRemoteOperationScopeHandler>**)this)->Invoke());
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteActiveEnd> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnimationStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnnotationType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteAnyObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteArray> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBool> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteBulletStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteByteArray> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCacheRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCapStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretBidiMode> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCaretPosition> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteChar> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteConnectionBoundObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteControlType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteCustomNavigationPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDockPosition> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDouble> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDragPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteDropTargetPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapsePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExpandCollapseState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTarget> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteExtensionTargetFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteFlowDirections> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGridPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteGuid> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHeadingLevel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteHorizontalTextAlignment> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInt> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteInvokePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteItemContainerPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLandmarkType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLegacyIAccessiblePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteLiveSetting> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMetadata> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteMultipleViewPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteNavigateDirection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteObjectFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOperationResultSet> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOrientationType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteOutlineStyles> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePatternId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemotePropertyId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRangeValuePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteRowOrColumnMajor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSayAsInterpretAs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollAmount> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteScrollPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSelectionPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSpreadsheetPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteString> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStringMap> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStyleId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteStylesPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSupportedTextSelection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteSynchronizedInputType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTableItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTablePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextAttributeId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextChildPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextDecorationLineStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextEditPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextPatternRangeEndpoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextRange> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTextUnit> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTogglePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteToggleState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteTransformPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteUint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteValuePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteVirtualizedItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowInteractionState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteWindowVisualState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::IAutomationRemoteZoomUnit> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteActiveEnd> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnimationStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnnotationType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteAnyObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteArray> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBool> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteBulletStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteByteArray> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCacheRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCapStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretBidiMode> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCaretPosition> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteChar> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteConnectionBoundObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteControlType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteCustomNavigationPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDockPosition> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDouble> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDragPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteDropTargetPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteElement> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapsePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExpandCollapseState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteExtensionTarget> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteFlowDirections> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGridPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteGuid> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHeadingLevel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteHorizontalTextAlignment> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInt> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteInvokePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteItemContainerPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLandmarkType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLegacyIAccessiblePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteLiveSetting> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMetadata> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteMultipleViewPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteNavigateDirection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOperationResultSet> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOrientationType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteOutlineStyles> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemotePatternId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemotePoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemotePropertyId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRangeValuePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRect> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteRowOrColumnMajor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSayAsInterpretAs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollAmount> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteScrollPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSelectionPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSpreadsheetPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteString> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStringMap> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStyleId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteStylesPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSupportedTextSelection> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteSynchronizedInputType> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTableItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTablePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextAttributeId> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextChildPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextDecorationLineStyle> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextEditPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextPatternRangeEndpoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextRange> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTextUnit> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTogglePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteToggleState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteTransformPattern2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteUint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteValuePattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteVirtualizedItemPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowInteractionState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowPattern> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteWindowVisualState> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::UIAutomation::AutomationRemoteZoomUnit> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
